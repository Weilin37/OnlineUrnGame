{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\InsectTrade\\\\app\\\\client\\\\src\\\\js\\\\components\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Loading from \"./Loading\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport \"../../css/app.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getData } from \"../features/markerSlice\";\nimport { Curve } from 'react-leaflet-curve';\nexport const LeafMap = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const pathOne = ['M', [50.14874640066278, 14.106445312500002], 'Q', [51.67255514839676, 16.303710937500004], [50.14874640066278, 18.676757812500004], 'T', [49.866316729538674, 25.0927734375]]; // state\n\n  const stateMarker = useSelector(state => state.marker);\n  const stateMap = useSelector(state => state.map); // Effects\n\n  useEffect(() => {\n    dispatch(getData(stateMarker.endpoint));\n  }, [dispatch]); // render component\n\n  if (stateMarker.data.length > 0) {\n    let curve = this.state.latngs.length > 0 ? /*#__PURE__*/_jsxDEV(Curve, {\n      positions: this.state.latngs,\n      option: {\n        animate: 3000\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 48\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(Map, {\n      doubleClickZoom: false,\n      preferCanvas: true,\n      center: [stateMap.lat, stateMap.lng],\n      zoom: stateMap.zoom,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Curve, {\n        positions: path,\n        option: {\n          color: 'red',\n          fill: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  } else {\n    let curve = this.state.latngs.length > 0 ? /*#__PURE__*/_jsxDEV(Curve, {\n      positions: this.state.latngs,\n      option: {\n        animate: 3000\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 48\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(Map, {\n      center: [stateMap.lat, stateMap.lng],\n      zoom: stateMap.zoom,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Curve, {\n        positions: path,\n        option: {\n          color: 'red',\n          fill: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(LeafMap, \"P4w/7haOUwmmnQlgE8olLhv4nIw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = LeafMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeafMap\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/InsectTrade/app/client/src/js/components/Map.js"],"names":["React","useEffect","Loading","Map","TileLayer","useSelector","useDispatch","getData","Curve","LeafMap","dispatch","pathOne","stateMarker","state","marker","stateMap","map","endpoint","data","length","curve","latngs","animate","lat","lng","zoom","path","color","fill"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Loading from \"./Loading\";\r\nimport { Map, TileLayer } from \"react-leaflet\";\r\nimport \"../../css/app.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getData } from \"../features/markerSlice\";\r\nimport { Curve } from 'react-leaflet-curve'\r\n\r\nexport const LeafMap = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const pathOne = ['M', [50.14874640066278, 14.106445312500002],\r\n  'Q', [51.67255514839676, 16.303710937500004],\r\n  [50.14874640066278, 18.676757812500004],\r\n  'T', [49.866316729538674, 25.0927734375]]\r\n\r\n    // state\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateMap = useSelector(state => state.map);\r\n\r\n    // Effects\r\n    useEffect(() => {\r\n        dispatch(getData(stateMarker.endpoint));\r\n    }, [dispatch]);\r\n\r\n    // render component\r\n    if (stateMarker.data.length > 0) {\r\n    let curve = this.state.latngs.length > 0 ? <Curve positions={this.state.latngs} option={{ animate: 3000 }} /> : null\r\n        return (\r\n            <Map doubleClickZoom={false} preferCanvas={true} center={[stateMap.lat, stateMap.lng]}\r\n            zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n              <Curve positions={path} option={{color:'red',fill:true}}/>\r\n              <Loading />\r\n            </Map>\r\n        );\r\n    } else {\r\n    let curve = this.state.latngs.length > 0 ? <Curve positions={this.state.latngs} option={{ animate: 3000 }} /> : null\r\n        return (\r\n            <Map center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n              <Curve positions={path} option={{color:'red',fill:true}}/>\r\n            </Map>\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
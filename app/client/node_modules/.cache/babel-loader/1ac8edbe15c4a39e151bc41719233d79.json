{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useLeaflet } from \"react-leaflet\";\nimport L from 'leaflet';\nimport '@elfalem/leaflet-curve';\nimport { useSelector } from \"react-redux\";\n\nconst Arches = () => {\n  _s();\n\n  const {\n    map\n  } = useLeaflet();\n  const stateMarker = useSelector(state => state.marker);\n\n  function calculateCurve(lat1, lng1, lat2, lng2) {\n    var latlng1 = [lat1, lng1];\n    var latlng2 = [lat2, ln2];\n    var offsetX = latlng2[1] - latlng1[1];\n    var offsetY = latlng2[0] - latlng1[0];\n    var r = Math.sqrt(Math.pow(offsetX, 2) + Math.pow(offsetY, 2)),\n        theta = Math.atan2(offsetY, offsetX);\n    var thetaOffset = 3.14 / 10;\n    var r2 = r / 2 / Math.cos(thetaOffset),\n        theta2 = theta + thetaOffset;\n    var midpointX = r2 * Math.cos(theta2) + latlng1[1],\n        midpointY = r2 * Math.sin(theta2) + latlng1[0];\n    var midpointLatLng = [midpointY, midpointX];\n    return {\n      'latlng1': latlng1,\n      'midpointLatLng': midpointLatLng,\n      'latlng2': latlng2\n    };\n  }\n\n  for (var i = 0; i < stateMarker.data.length; i++) {}\n\n  var path = L.curve(['M', [50.54136296522163, 28.520507812500004], 'C', [52.214338608258224, 28.564453125000004], [48.45835188280866, 33.57421875000001], [50.680797145321655, 33.83789062500001], 'V', [48.40003249610685], 'L', [47.45839225859763, 31.201171875], [48.40003249610685, 28.564453125000004], 'Z'], {\n    color: 'red',\n    fill: true\n  }).addTo(map);\n  console.log(stateMarker.data);\n  console.log(map);\n  return null;\n};\n\n_s(Arches, \"MSwarOdHxI5QI54a703war+9GWw=\", false, function () {\n  return [useLeaflet, useSelector];\n});\n\n_c = Arches;\nexport default Arches;\n\nvar _c;\n\n$RefreshReg$(_c, \"Arches\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/InsectTrade/app/client/src/js/components/Arches.js"],"names":["useLeaflet","L","useSelector","Arches","map","stateMarker","state","marker","calculateCurve","lat1","lng1","lat2","lng2","latlng1","latlng2","ln2","offsetX","offsetY","r","Math","sqrt","pow","theta","atan2","thetaOffset","r2","cos","theta2","midpointX","midpointY","sin","midpointLatLng","i","data","length","path","curve","color","fill","addTo","console","log"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAO,wBAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAAUJ,UAAU,EAA1B;AACA,QAAMK,WAAW,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAA/B;;AAEA,WAASC,cAAT,CAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,IAA1C,EAAgD;AAC5C,QAAIC,OAAO,GAAG,CAACJ,IAAD,EAAMC,IAAN,CAAd;AACA,QAAII,OAAO,GAAG,CAACH,IAAD,EAAMI,GAAN,CAAd;AACA,QAAIC,OAAO,GAAGF,OAAO,CAAC,CAAD,CAAP,GAAaD,OAAO,CAAC,CAAD,CAAlC;AACA,QAAII,OAAO,GAAGH,OAAO,CAAC,CAAD,CAAP,GAAaD,OAAO,CAAC,CAAD,CAAlC;AAEA,QAAIK,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAWD,IAAI,CAACE,GAAL,CAASL,OAAT,EAAkB,CAAlB,IAAuBG,IAAI,CAACE,GAAL,CAASJ,OAAT,EAAkB,CAAlB,CAAlC,CAAR;AAAA,QACIK,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAWN,OAAX,EAAoBD,OAApB,CADZ;AAGA,QAAIQ,WAAW,GAAI,OAAK,EAAxB;AAEA,QAAIC,EAAE,GAAIP,CAAC,GAAC,CAAH,GAAOC,IAAI,CAACO,GAAL,CAASF,WAAT,CAAhB;AAAA,QACIG,MAAM,GAAGL,KAAK,GAAGE,WADrB;AAGA,QAAII,SAAS,GAAIH,EAAE,GAAGN,IAAI,CAACO,GAAL,CAASC,MAAT,CAAN,GAA0Bd,OAAO,CAAC,CAAD,CAAjD;AAAA,QACIgB,SAAS,GAAIJ,EAAE,GAAGN,IAAI,CAACW,GAAL,CAASH,MAAT,CAAN,GAA0Bd,OAAO,CAAC,CAAD,CADjD;AAGA,QAAIkB,cAAc,GAAG,CAACF,SAAD,EAAYD,SAAZ,CAArB;AAEA,WAAO;AAAC,iBAAWf,OAAZ;AAAqB,wBAAkBkB,cAAvC;AAAuD,iBAAWjB;AAAlE,KAAP;AACH;;AAGD,OAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,WAAW,CAAC4B,IAAZ,CAAiBC,MAArC,EAA6CF,CAAC,EAA9C,EAAkD,CAEjD;;AAED,MAAIG,IAAI,GAAGlC,CAAC,CAACmC,KAAF,CAAQ,CAAC,GAAD,EAAK,CAAC,iBAAD,EAAmB,kBAAnB,CAAL,EAClB,GADkB,EACd,CAAC,kBAAD,EAAoB,kBAApB,CADc,EAEjB,CAAC,iBAAD,EAAmB,iBAAnB,CAFiB,EAGjB,CAAC,kBAAD,EAAoB,iBAApB,CAHiB,EAIlB,GAJkB,EAId,CAAC,iBAAD,CAJc,EAKlB,GALkB,EAKd,CAAC,iBAAD,EAAmB,YAAnB,CALc,EAMjB,CAAC,iBAAD,EAAmB,kBAAnB,CANiB,EAMsB,GANtB,CAAR,EAOV;AAACC,IAAAA,KAAK,EAAC,KAAP;AAAaC,IAAAA,IAAI,EAAC;AAAlB,GAPU,EAOeC,KAPf,CAOqBnC,GAPrB,CAAX;AASAoC,EAAAA,OAAO,CAACC,GAAR,CAAYpC,WAAW,CAAC4B,IAAxB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYrC,GAAZ;AAEA,SAAO,IAAP;AAEH,CA7CD;;GAAMD,M;UACcH,U,EACIE,W;;;KAFlBC,M;AA+CN,eAAeA,MAAf","sourcesContent":["import { useLeaflet } from \"react-leaflet\";\r\nimport L from 'leaflet'\r\nimport '@elfalem/leaflet-curve'\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Arches = () => {\r\n    const { map } = useLeaflet();\r\n    const stateMarker = useSelector(state => state.marker);\r\n\r\n    function calculateCurve(lat1, lng1, lat2, lng2) {\r\n        var latlng1 = [lat1,lng1];\r\n        var latlng2 = [lat2,ln2];\r\n        var offsetX = latlng2[1] - latlng1[1];\r\n        var offsetY = latlng2[0] - latlng1[0];\r\n\r\n        var r = Math.sqrt( Math.pow(offsetX, 2) + Math.pow(offsetY, 2) ),\r\n            theta = Math.atan2(offsetY, offsetX);\r\n\r\n        var thetaOffset = (3.14/10);\r\n\r\n        var r2 = (r/2)/(Math.cos(thetaOffset)),\r\n            theta2 = theta + thetaOffset;\r\n\r\n        var midpointX = (r2 * Math.cos(theta2)) + latlng1[1],\r\n            midpointY = (r2 * Math.sin(theta2)) + latlng1[0];\r\n\r\n        var midpointLatLng = [midpointY, midpointX];\r\n\r\n        return {'latlng1': latlng1, 'midpointLatLng': midpointLatLng, 'latlng2': latlng2}\r\n    }\r\n\r\n\r\n    for (var i = 0; i < stateMarker.data.length; i++) {\r\n\r\n    }\r\n\r\n    var path = L.curve(['M',[50.54136296522163,28.520507812500004],\r\n\t\t\t\t\t'C',[52.214338608258224,28.564453125000004],\r\n\t\t\t\t\t\t[48.45835188280866,33.57421875000001],\r\n\t\t\t\t\t\t[50.680797145321655,33.83789062500001],\r\n\t\t\t\t\t'V',[48.40003249610685],\r\n\t\t\t\t\t'L',[47.45839225859763,31.201171875],\r\n\t\t\t\t\t\t[48.40003249610685,28.564453125000004],'Z'],\r\n\t\t\t\t\t{color:'red',fill:true}).addTo(map);\r\n\r\n    console.log(stateMarker.data)\r\n    console.log(map);\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Arches;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\OnlineUrnGame\\\\app\\\\client\\\\src\\\\js\\\\components\\\\CreateGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createNewGame, getNewGame } from \"../features/gameSlice\";\nimport Button from '@material-ui/core/Button';\n\nconst CreateGame = () => {\n  _s();\n\n  const dispatch = useDispatch(); // state\n\n  const gameState = useSelector(state => state.game); // Get Open Games\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(getNewGame(\"/api/get/newgame\"));\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []); // create new game\n\n  function createNewGame() {\n    var player1 = gameState.game_waiting_data['player1name'];\n    var player2 = gameState.game_waiting_data['player2name'];\n\n    if (!player1 && !player2) {\n      dispatch(getNewGame('/api/get/creategame'));\n    }\n  } // render component\n\n\n  if (gameState.game_waiting === true) {\n    return null;\n  } else {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: createNewGame,\n      children: \"Enter New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(CreateGame, \"i1uH8FnuNPTJtr7/vp43AmTUyTs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CreateGame;\nexport default CreateGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateGame\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/OnlineUrnGame/app/client/src/js/components/CreateGame.js"],"names":["React","useEffect","useSelector","useDispatch","createNewGame","getNewGame","Button","CreateGame","dispatch","gameState","state","game","interval","setInterval","clearInterval","player1","game_waiting_data","player2","game_waiting"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,uBAA1C;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CADqB,CAGrB;;AACA,QAAMM,SAAS,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAA7B,CAJqB,CAMrB;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCL,MAAAA,QAAQ,CAACH,UAAU,CAAC,kBAAD,CAAX,CAAR;AACD,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO,MAAMS,aAAa,CAACF,QAAD,CAA1B;AACD,GALQ,EAKN,EALM,CAAT,CAPqB,CAcrB;;AACA,WAASR,aAAT,GAAyB;AACrB,QAAIW,OAAO,GAAGN,SAAS,CAACO,iBAAV,CAA4B,aAA5B,CAAd;AACA,QAAIC,OAAO,GAAGR,SAAS,CAACO,iBAAV,CAA4B,aAA5B,CAAd;;AAEA,QAAI,CAACD,OAAD,IAAY,CAACE,OAAjB,EAA0B;AACtBT,MAAAA,QAAQ,CAACH,UAAU,CAAC,qBAAD,CAAX,CAAR;AACH;AACJ,GAtBoB,CAwBrB;;;AACA,MAAII,SAAS,CAACS,YAAV,KAA2B,IAA/B,EAAqC;AACjC,WACI,IADJ;AAGH,GAJD,MAIO;AACH,wBACI,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,SAAlC;AAA4C,MAAA,OAAO,EAAEd,aAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;AACJ,CApCD;;GAAMG,U;UACeJ,W,EAGCD,W;;;KAJhBK,U;AAsCN,eAAeA,UAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { createNewGame, getNewGame } from \"../features/gameSlice\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst CreateGame = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    // state\r\n    const gameState = useSelector(state => state.game);\r\n\r\n    // Get Open Games\r\n    useEffect(() => {\r\n      const interval = setInterval(() => {\r\n        dispatch(getNewGame(\"/api/get/newgame\"));\r\n      }, 2000);\r\n      return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    // create new game\r\n    function createNewGame() {\r\n        var player1 = gameState.game_waiting_data['player1name']\r\n        var player2 = gameState.game_waiting_data['player2name']\r\n\r\n        if (!player1 && !player2) {\r\n            dispatch(getNewGame('/api/get/creategame'));\r\n        }\r\n    }\r\n\r\n    // render component\r\n    if (gameState.game_waiting === true) {\r\n        return (\r\n            null\r\n        );\r\n    } else {\r\n        return(\r\n            <Button variant=\"contained\" color=\"primary\" onClick={createNewGame}>\r\n                Enter New Game\r\n            </Button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateGame;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\UrbanTreeConservation\\\\client\\\\src\\\\js\\\\components\\\\DrawBounds.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { Circle } from \"react-leaflet\"; // Custom map components\n\nconst DrawBounds = () => {\n  _s();\n\n  const stateMarker = useSelector(state => state.marker);\n\n  if (stateMarker.view_status === \"city\") {\n    return /*#__PURE__*/_jsxDEV(Circle, {\n      weight: 1,\n      opacity: 0.5,\n      fill: false,\n      center: [stateMarker.scan_lat, stateMarker.scan_lng],\n      radius: 1.5 * stateMarker.scan_radius\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s(DrawBounds, \"j8P//SPCBweR0xnwSXCNLfarBcw=\", false, function () {\n  return [useSelector];\n});\n\n_c = DrawBounds;\nexport default DrawBounds;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrawBounds\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/components/DrawBounds.js"],"names":["useSelector","Circle","DrawBounds","stateMarker","state","marker","view_status","scan_lat","scan_lng","scan_radius"],"mappings":";;;;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,eAAvB,C,CAEA;;AACA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAMC,WAAW,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAA/B;;AAEA,MAAIF,WAAW,CAACG,WAAZ,KAA4B,MAAhC,EAAwC;AACpC,wBAAO,QAAC,MAAD;AACC,MAAA,MAAM,EAAE,CADT;AAEC,MAAA,OAAO,EAAE,GAFV;AAGC,MAAA,IAAI,EAAE,KAHP;AAIC,MAAA,MAAM,EAAE,CAACH,WAAW,CAACI,QAAb,EAAuBJ,WAAW,CAACK,QAAnC,CAJT;AAKC,MAAA,MAAM,EAAE,MAAIL,WAAW,CAACM;AALzB;AAAA;AAAA;AAAA;AAAA,YAAP;AAMH,GAPD,MAOO;AACH,WAAO,IAAP;AACH;AACJ,CAbD;;GAAMP,U;UACkBF,W;;;KADlBE,U;AAeN,eAAeA,UAAf","sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { Circle } from \"react-leaflet\";\r\n\r\n// Custom map components\r\nconst DrawBounds = () => {\r\n    const stateMarker = useSelector(state => state.marker);\r\n\r\n    if (stateMarker.view_status === \"city\") {\r\n        return <Circle\r\n                weight={1}\r\n                opacity={0.5}\r\n                fill={false}\r\n                center={[stateMarker.scan_lat, stateMarker.scan_lng]}\r\n                radius={1.5*stateMarker.scan_radius} />\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default DrawBounds;"]},"metadata":{},"sourceType":"module"}
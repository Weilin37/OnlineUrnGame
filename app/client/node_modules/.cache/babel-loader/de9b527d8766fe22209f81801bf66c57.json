{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios'; // CREATE Thunk\n\nexport const getGlobal = createAsyncThunk(\"markers/getGlobal\", async (endpoint, thunkAPI) => {\n  try {\n    const response = await axios.get(endpoint);\n    return response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const getCity = createAsyncThunk(\"markers/getCity\", async (endpoint, thunkAPI) => {\n  try {\n    const response = await axios.get(endpoint);\n    return response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const getFreeDraw = createAsyncThunk(\"markers/getFreeDraw\", async (endpoint, thunkAPI) => {\n  try {\n    const response = await axios.get(endpoint);\n    return response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // CREATE SLICE\n\nconst markerSlice = createSlice({\n  name: \"markers\",\n  initialState: {\n    global: [],\n    city: [],\n    freedraw: [],\n    endpoint: \"/api/get/global\",\n    scan_status: \"waiting\",\n    scan_radius: 0,\n    scan_lat: 37.8,\n    scan_lng: -96,\n    scan_zoom: 3,\n    cityZoom: 10,\n    treeZoom: 16,\n    view_status: \"global\",\n    previous_view_status: \"global\",\n    loading: false\n  },\n  reducers: {\n    setEndpoint: (state, action) => {\n      if (action.payload.type === \"global\") {\n        state.endpoint = \"/api/get/global\";\n      } else if (action.payload.type === \"city\") {\n        state.endpoint = \"/api/get/city?lat=\" + action.payload.lat + \"&lng=\" + action.payload.lng + \"&radius=\" + action.payload.radius + \"&limit=\" + action.payload.limit;\n      } else if (action.payload.type === \"freedraw\") {\n        state.endpoint = \"/api/get/freedraw?lat=\" + action.payload.lat + \"&lng=\" + action.payload.lng + \"&radius=\" + action.payload.radius + \"&polygons=\" + action.payload.polygons;\n      }\n    },\n    clearCity: state => {\n      state.city = [];\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    clearFreeDraw: state => {\n      state.freedraw = [];\n    },\n    setScanStatus: (state, action) => {\n      state.scan_status = action.payload;\n    },\n    setViewStatus: (state, action) => {\n      state.previous_view_status = state.view_status;\n      state.view_status = action.payload;\n    },\n    setScanRadius: (state, action) => {\n      state.scan_radius = action.payload;\n    },\n    setScanZoom: (state, action) => {\n      state.scan_zoom = action.payload;\n    },\n    setScanCenter: (state, action) => {\n      state.scan_lat = action.payload.lat;\n      state.scan_lng = action.payload.lng;\n    },\n    setScanLng: (state, action) => {\n      state.scan_lng = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    // global\n    builder.addCase(getGlobal.pending, state => {\n      state.global = [];\n    });\n    builder.addCase(getGlobal.fulfilled, (state, {\n      payload\n    }) => {\n      state.global = payload;\n    });\n    builder.addCase(getGlobal.rejected, (state, action) => {\n      state.loading = false;\n    }); // city\n\n    builder.addCase(getCity.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(getCity.fulfilled, (state, {\n      payload\n    }) => {\n      payload = payload.map(function (o) {\n        o.position = [o.latitude, o.longitude];\n        o.markerSpriteAnchor = [0.5, 0.5];\n        o.tooltip = '<div><p>' + o.scientific_name + '</p><p></p></div>';\n\n        if (o.native === \"TRUE\") {\n          o.iconId = \"icon_green\";\n          o.customIcon = '<svg xmlns=\"http://www.w3.org/2000/svg\" overflow=\"visible\" fill=\"green\" preserveAspectRatio=\"xMinYMin meet\" width=\"10\" height=\"10\" viewBox=\"0 0 10 10\"><circle r=\"50%\" cx=\"50%\" cy=\"50%\" /></svg>';\n        } else {\n          o.iconId = \"icon_gray\";\n          o.customIcon = '<svg xmlns=\"http://www.w3.org/2000/svg\" overflow=\"visible\" fill=\"gray\" fill-opacity=\"50%\" width=\"10\" height=\"10\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 10 10\"><circle r=\"50%\" cx=\"50%\" cy=\"50%\" /></svg>';\n        }\n\n        return o;\n      });\n      state.city = payload;\n      state.loading = false;\n    });\n    builder.addCase(getCity.rejected, (state, action) => {\n      state.loading = false;\n    }); // free draw\n\n    builder.addCase(getFreeDraw.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(getFreeDraw.fulfilled, (state, {\n      payload\n    }) => {\n      state.freedraw = payload;\n      state.loading = false;\n    });\n    builder.addCase(getFreeDraw.rejected, (state, action) => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setEndpoint,\n  setViewStatus,\n  clearCity,\n  clearFreeDraw,\n  setScanStatus,\n  setScanRadius,\n  setScanCenter,\n  setScanZoom,\n  setLoading\n} = markerSlice.actions;\nexport default markerSlice;","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/features/markerSlice.js"],"names":["createSlice","createAsyncThunk","axios","getGlobal","endpoint","thunkAPI","response","get","data","error","rejectWithValue","message","getCity","getFreeDraw","markerSlice","name","initialState","global","city","freedraw","scan_status","scan_radius","scan_lat","scan_lng","scan_zoom","cityZoom","treeZoom","view_status","previous_view_status","loading","reducers","setEndpoint","state","action","payload","type","lat","lng","radius","limit","polygons","clearCity","setLoading","clearFreeDraw","setScanStatus","setViewStatus","setScanRadius","setScanZoom","setScanCenter","setScanLng","extraReducers","builder","addCase","pending","fulfilled","rejected","map","o","position","latitude","longitude","markerSpriteAnchor","tooltip","scientific_name","native","iconId","customIcon","actions"],"mappings":"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","sourcesContent":["import { createSlice,createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\n\r\n// CREATE Thunk\r\nexport const getGlobal = createAsyncThunk(\"markers/getGlobal\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\nexport const getCity = createAsyncThunk(\"markers/getCity\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\nexport const getFreeDraw = createAsyncThunk(\"markers/getFreeDraw\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\n// CREATE SLICE\r\nconst markerSlice = createSlice({\r\n  name: \"markers\",\r\n  initialState: {\r\n    global: [],\r\n    city: [],\r\n    freedraw: [],\r\n    endpoint: \"/api/get/global\",\r\n    scan_status: \"waiting\",\r\n    scan_radius: 0,\r\n    scan_lat: 37.8,\r\n    scan_lng: -96,\r\n    scan_zoom: 3,\r\n    cityZoom: 10,\r\n    treeZoom: 16,\r\n    view_status: \"global\",\r\n    previous_view_status: \"global\",\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    setEndpoint: (state, action) => {\r\n        if (action.payload.type === \"global\") {\r\n            state.endpoint = \"/api/get/global\"\r\n        } else if (action.payload.type === \"city\") {\r\n            state.endpoint = \"/api/get/city?lat=\"+action.payload.lat+\"&lng=\"+action.payload.lng+\"&radius=\"+action.payload.radius+\"&limit=\"+action.payload.limit\r\n        } else if (action.payload.type === \"freedraw\") {\r\n            state.endpoint = \"/api/get/freedraw?lat=\"+action.payload.lat+\"&lng=\"+action.payload.lng+\"&radius=\"+action.payload.radius+\"&polygons=\"+action.payload.polygons;\r\n        }\r\n    },\r\n    clearCity: (state) => {state.city = [];},\r\n    setLoading: (state, action) => {state.loading = action.payload;},\r\n    clearFreeDraw: (state) => {state.freedraw = [];},\r\n    setScanStatus: (state, action) => {state.scan_status = action.payload;},\r\n    setViewStatus: (state, action) => {\r\n        state.previous_view_status = state.view_status;\r\n        state.view_status = action.payload;\r\n    },\r\n    setScanRadius: (state, action) => {state.scan_radius = action.payload;},\r\n    setScanZoom: (state, action) => {state.scan_zoom = action.payload;},\r\n    setScanCenter: (state, action) => {\r\n        state.scan_lat = action.payload.lat;\r\n        state.scan_lng = action.payload.lng;\r\n    },\r\n    setScanLng: (state, action) => {state.scan_lng = action.payload;},\r\n  },\r\n  extraReducers: (builder) => {\r\n    // global\r\n    builder.addCase(getGlobal.pending, (state) => {\r\n        state.global = [];\r\n    });\r\n    builder.addCase(getGlobal.fulfilled, (state, { payload }) => {\r\n        state.global = payload;\r\n    });\r\n    builder.addCase(getGlobal.rejected,(state, action) => {\r\n        state.loading = false;\r\n    });\r\n    // city\r\n    builder.addCase(getCity.pending, (state) => {\r\n        state.loading = true;\r\n    });\r\n    builder.addCase(getCity.fulfilled, (state, { payload }) => {\r\n        payload = payload.map(function(o) {\r\n          o.position = [o.latitude, o.longitude];\r\n          o.markerSpriteAnchor = [0.5,0.5];\r\n          o.tooltip = '<div><p>'+o.scientific_name+'</p><p></p></div>';\r\n          if (o.native === \"TRUE\") {\r\n            o.iconId = \"icon_green\";\r\n            o.customIcon = '<svg xmlns=\"http://www.w3.org/2000/svg\" overflow=\"visible\" fill=\"green\" preserveAspectRatio=\"xMinYMin meet\" width=\"10\" height=\"10\" viewBox=\"0 0 10 10\"><circle r=\"50%\" cx=\"50%\" cy=\"50%\" /></svg>'\r\n          } else {\r\n            o.iconId = \"icon_gray\";\r\n            o.customIcon = '<svg xmlns=\"http://www.w3.org/2000/svg\" overflow=\"visible\" fill=\"gray\" fill-opacity=\"50%\" width=\"10\" height=\"10\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 10 10\"><circle r=\"50%\" cx=\"50%\" cy=\"50%\" /></svg>'\r\n          }\r\n          return o;\r\n        });\r\n        state.city = payload;\r\n        state.loading = false;\r\n    });\r\n    builder.addCase(getCity.rejected,(state, action) => {\r\n        state.loading = false;\r\n    });\r\n    // free draw\r\n    builder.addCase(getFreeDraw.pending, (state) => {\r\n        state.loading = true;\r\n    });\r\n    builder.addCase(getFreeDraw.fulfilled, (state, { payload }) => {\r\n        state.freedraw = payload;\r\n        state.loading = false;\r\n    });\r\n    builder.addCase(getFreeDraw.rejected,(state, action) => {\r\n        state.loading = false;\r\n    });\r\n  }\r\n});\r\n\r\nexport const { setEndpoint, setViewStatus, clearCity, clearFreeDraw, setScanStatus, setScanRadius, setScanCenter, setScanZoom, setLoading } = markerSlice.actions;\r\n\r\nexport default markerSlice"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useLeaflet } from \"react-leaflet\";\nimport L from 'leaflet';\nimport '@elfalem/leaflet-curve';\nimport { useSelector } from \"react-redux\";\n\nconst Arches = () => {\n  _s();\n\n  const {\n    map\n  } = useLeaflet();\n  const stateMarker = useSelector(state => state.marker);\n\n  function calculateCurve(lat1, lng1, lat2, lng2) {\n    var latlng1 = [lat1, lng1];\n    var latlng2 = [lat2, lng2];\n    var offsetX = latlng2[1] - latlng1[1];\n    var offsetY = latlng2[0] - latlng1[0];\n    var r = Math.sqrt(Math.pow(offsetX, 2) + Math.pow(offsetY, 2)),\n        theta = Math.atan2(offsetY, offsetX);\n    var thetaOffset = 3.14 / 10;\n    var r2 = r / 2 / Math.cos(thetaOffset);\n    var theta2 = theta + thetaOffset;\n    var midpointX = r2 * Math.cos(theta2) + latlng1[1];\n    var midpointY = r2 * Math.sin(theta2) + latlng1[0];\n    var midpointLatLng = [midpointY, midpointX];\n    var durationBase = 2000;\n    var duration = Math.sqrt(Math.log(r)) * durationBase;\n\n    if (isNaN(duration)) {\n      duration = durationBase;\n    }\n\n    var pathOptions = {\n      color: 'rgba(255,255,255,0.5)',\n      weight: 1\n    };\n    pathOptions.animate = {\n      duration: duration,\n      iterations: Infinity,\n      easing: 'ease-in-out',\n      direction: 'normal'\n    };\n    return {\n      'latlng1': latlng1,\n      'midpointLatLng': midpointLatLng,\n      'latlng2': latlng2,\n      'pathOptions': pathOptions\n    };\n  }\n\n  for (var i = 0; i < stateMarker.filtered_data.length; i++) {\n    var lat1 = stateMarker.filtered_data[i].origin_latitude;\n    var lng1 = stateMarker.filtered_data[i].origin_longitude;\n    var lat2 = stateMarker.filtered_data[i].latitude;\n    var lng2 = stateMarker.filtered_data[i].longitude;\n    var coordinates = calculateCurve(lat1, lng1, lat2, lng2);\n    var curvedPath = L.curve(['M', coordinates['latlng1'], 'Q', coordinates['midpointLatLng'], coordinates['latlng2']], coordinates['pathOptions']).addTo(map);\n  }\n\n  console.log(stateMarker.data);\n  console.log(map);\n  return null;\n};\n\n_s(Arches, \"MSwarOdHxI5QI54a703war+9GWw=\", false, function () {\n  return [useLeaflet, useSelector];\n});\n\n_c = Arches;\nexport default Arches;\n\nvar _c;\n\n$RefreshReg$(_c, \"Arches\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/InsectTrade/app/client/src/js/components/Arches.js"],"names":["useLeaflet","L","useSelector","Arches","map","stateMarker","state","marker","calculateCurve","lat1","lng1","lat2","lng2","latlng1","latlng2","offsetX","offsetY","r","Math","sqrt","pow","theta","atan2","thetaOffset","r2","cos","theta2","midpointX","midpointY","sin","midpointLatLng","durationBase","duration","log","isNaN","pathOptions","color","weight","animate","iterations","Infinity","easing","direction","i","filtered_data","length","origin_latitude","origin_longitude","latitude","longitude","coordinates","curvedPath","curve","addTo","console","data"],"mappings":"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","sourcesContent":["import { useLeaflet } from \"react-leaflet\";\r\nimport L from 'leaflet'\r\nimport '@elfalem/leaflet-curve'\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Arches = () => {\r\n    const { map } = useLeaflet();\r\n    const stateMarker = useSelector(state => state.marker);\r\n\r\n    function calculateCurve(lat1, lng1, lat2, lng2) {\r\n        var latlng1 = [lat1,lng1];\r\n        var latlng2 = [lat2,lng2];\r\n        var offsetX = latlng2[1] - latlng1[1];\r\n        var offsetY = latlng2[0] - latlng1[0];\r\n\r\n        var r = Math.sqrt( Math.pow(offsetX, 2) + Math.pow(offsetY, 2) ),\r\n            theta = Math.atan2(offsetY, offsetX);\r\n\r\n        var thetaOffset = (3.14/10);\r\n\r\n        var r2 = (r/2)/(Math.cos(thetaOffset));\r\n        var theta2 = theta + thetaOffset;\r\n\r\n        var midpointX = (r2 * Math.cos(theta2)) + latlng1[1];\r\n        var midpointY = (r2 * Math.sin(theta2)) + latlng1[0];\r\n\r\n        var midpointLatLng = [midpointY, midpointX];\r\n\r\n        var durationBase = 2000;\r\n        var duration = Math.sqrt(Math.log(r)) * durationBase;\r\n        if (isNaN(duration)) {duration = durationBase}\r\n\r\n        var pathOptions = {\r\n            color: 'rgba(255,255,255,0.5)',\r\n            weight: 1\r\n        }\r\n\r\n        pathOptions.animate = {\r\n            duration: duration,\r\n            iterations: Infinity,\r\n            easing: 'ease-in-out',\r\n            direction: 'normal'\r\n        }\r\n        return {'latlng1': latlng1, 'midpointLatLng': midpointLatLng, 'latlng2': latlng2, 'pathOptions': pathOptions}\r\n    }\r\n\r\n    for (var i = 0; i < stateMarker.filtered_data.length; i++) {\r\n        var lat1 = stateMarker.filtered_data[i].origin_latitude;\r\n        var lng1 = stateMarker.filtered_data[i].origin_longitude;\r\n        var lat2 = stateMarker.filtered_data[i].latitude;\r\n        var lng2 = stateMarker.filtered_data[i].longitude;\r\n        var coordinates = calculateCurve(lat1,lng1,lat2,lng2);\r\n\r\n        var curvedPath = L.curve(\r\n        [\r\n            'M', coordinates['latlng1'],\r\n            'Q', coordinates['midpointLatLng'],\r\n                 coordinates['latlng2']\r\n        ], coordinates['pathOptions']).addTo(map);\r\n    }\r\n\r\n    console.log(stateMarker.data)\r\n    console.log(map);\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Arches;"]},"metadata":{},"sourceType":"module"}
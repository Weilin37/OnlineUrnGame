{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\InsectTrade\\\\app\\\\client\\\\src\\\\js\\\\components\\\\Locations.js\",\n    _s = $RefreshSig$();\n\nimport { useLeaflet, CircleMarker } from \"react-leaflet\";\nimport L from 'leaflet';\nimport { useSelector } from \"react-redux\";\n\nconst Locations = () => {\n  _s();\n\n  const {\n    map\n  } = useLeaflet();\n  const stateMarker = useSelector(state => state.marker);\n\n  function arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length !== b.length) return false; // If you don't care about the order of the elements inside\n    // the array, you should sort both arrays here.\n    // Please note that calling sort on an array will modify that array.\n    // you might want to clone your array first.\n\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  } // get sellers\n\n\n  var sellers = [];\n\n  for (var i in stateMarker.filtered_data) {\n    var original = true;\n    var coordinates = [stateMarker.filtered_data[i].latitude, stateMarker.filtered_data[i].longitude];\n\n    for (var j in sellers) {\n      if (arraysEqual(sellers[j], coordinates)) {\n        original = false;\n      }\n    }\n\n    if (original === true) {\n      sellers.push(coordinates);\n    }\n  } // get origins\n\n\n  var origins = [];\n\n  for (var i in stateMarker.filtered_data) {\n    var original = true;\n    var coordinates = [stateMarker.filtered_data[i].origin_latitude, stateMarker.filtered_data[i].origin_longitude];\n\n    for (var j in origins) {\n      if (arraysEqual(origins[j], coordinates)) {\n        original = false;\n      }\n    }\n\n    if (original === true) {\n      origins.push(coordinates);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [sellers.map(function (coordinates, index) {\n      console.log(coordinates);\n      return /*#__PURE__*/_jsxDEV(CircleMarker, {\n        center: coordinates,\n        fillOpacity: 0.5,\n        radius: 10,\n        color: 'red',\n        stroke: false\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this);\n    }), origins.map(function (coordinates, index) {\n      console.log(coordinates);\n      return /*#__PURE__*/_jsxDEV(CircleMarker, {\n        center: coordinates,\n        fillOpacity: 0.5,\n        radius: 10,\n        color: 'blue',\n        stroke: false\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Locations, \"MSwarOdHxI5QI54a703war+9GWw=\", false, function () {\n  return [useLeaflet, useSelector];\n});\n\n_c = Locations;\nexport default Locations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Locations\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/InsectTrade/app/client/src/js/components/Locations.js"],"names":["useLeaflet","CircleMarker","L","useSelector","Locations","map","stateMarker","state","marker","arraysEqual","a","b","length","i","sellers","filtered_data","original","coordinates","latitude","longitude","j","push","origins","origin_latitude","origin_longitude","index","console","log"],"mappings":"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","sourcesContent":["import { useLeaflet, CircleMarker } from \"react-leaflet\";\r\nimport L from 'leaflet'\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Locations = () => {\r\n    const { map } = useLeaflet();\r\n    const stateMarker = useSelector(state => state.marker);\r\n\r\n    function arraysEqual(a, b) {\r\n        if (a === b) return true;\r\n        if (a == null || b == null) return false;\r\n        if (a.length !== b.length) return false;\r\n\r\n        // If you don't care about the order of the elements inside\r\n        // the array, you should sort both arrays here.\r\n        // Please note that calling sort on an array will modify that array.\r\n        // you might want to clone your array first.\r\n\r\n        for (var i = 0; i < a.length; ++i) {\r\n            if (a[i] !== b[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // get sellers\r\n    var sellers = [];\r\n    for (var i in stateMarker.filtered_data) {\r\n        var original = true;\r\n        var coordinates = [stateMarker.filtered_data[i].latitude, stateMarker.filtered_data[i].longitude];\r\n        for (var j in sellers) {\r\n            if (arraysEqual(sellers[j],coordinates)) {original=false}\r\n        }\r\n        if (original === true){\r\n            sellers.push(coordinates)\r\n        }\r\n    }\r\n\r\n    // get origins\r\n    var origins = [];\r\n    for (var i in stateMarker.filtered_data) {\r\n        var original = true;\r\n        var coordinates = [stateMarker.filtered_data[i].origin_latitude, stateMarker.filtered_data[i].origin_longitude];\r\n        for (var j in origins) {\r\n            if (arraysEqual(origins[j],coordinates)) {original=false}\r\n        }\r\n        if (original === true){\r\n            origins.push(coordinates)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {sellers.map(function(coordinates,index) {\r\n                console.log(coordinates);\r\n                return(\r\n                    <CircleMarker\r\n                        key={index}\r\n                        center={coordinates}\r\n                        fillOpacity={0.5}\r\n                        radius={10}\r\n                        color={'red'}\r\n                        stroke={false}\r\n                    />\r\n                )\r\n            })}\r\n            {origins.map(function(coordinates,index) {\r\n                console.log(coordinates);\r\n                return(\r\n                    <CircleMarker\r\n                        key={index}\r\n                        center={coordinates}\r\n                        fillOpacity={0.5}\r\n                        radius={10}\r\n                        color={'blue'}\r\n                        stroke={false}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Locations;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios'; // CREATE Thunk\n\nexport const getSearch = createAsyncThunk(\"search/getSearch\", async (location, thunkAPI) => {\n  location = location.replace(\",\", \"%2C\");\n  location = location.replace(\" \", \"%20\");\n\n  try {\n    const response = await axios.get(\"https://api.opencagedata.com/geocode/v1/json?key=efb8bfa10d614e67b5ba72a2934f6b25&q=\" + location + \"&pretty=1\");\n    return await response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // CREATE SLICE\n\nconst mapSlice = createSlice({\n  name: \"map\",\n  initialState: {\n    zoom: 3,\n    lat: 37.8,\n    lng: -96,\n    search: \"waiting\"\n  },\n  reducers: {\n    setZoom: (state, action) => {\n      state.zoom = action.payload;\n    },\n    setDrawMode: (state, action) => {\n      state.draw_mode = action.payload;\n    },\n    setSearch: (state, action) => {\n      state.search = action.payload;\n    },\n    setCenter: (state, action) => {\n      state.lat = action.payload.lat;\n      state.lng = action.payload.lng;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getSearch.pending, state => {\n      state.loading = \"loading\";\n    });\n    builder.addCase(getSearch.fulfilled, (state, {\n      payload\n    }) => {\n      const lat = payload.results[0].geometry.lat;\n      const lng = payload.results[0].geometry.lng;\n      state.search = \"searching\";\n      state.lat = lat;\n      state.lng = lng;\n      state.loading = \"loaded\";\n      state.zoom = 10;\n    });\n    builder.addCase(getSearch.rejected, (state, action) => {\n      state.loading = \"error\";\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  setZoom,\n  setCenter,\n  setSearch,\n  setDrawMode\n} = mapSlice.actions;\nexport default mapSlice;","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/InsectTrade/app/client/src/js/features/mapSlice.js"],"names":["createSlice","createAsyncThunk","axios","getSearch","location","thunkAPI","replace","response","get","data","error","rejectWithValue","message","mapSlice","name","initialState","zoom","lat","lng","search","reducers","setZoom","state","action","payload","setDrawMode","draw_mode","setSearch","setCenter","extraReducers","builder","addCase","pending","loading","fulfilled","results","geometry","rejected","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\n\r\n// CREATE Thunk\r\nexport const getSearch = createAsyncThunk(\"search/getSearch\", async (location, thunkAPI) => {\r\n    location = location.replace(\",\",\"%2C\")\r\n    location = location.replace(\" \",\"%20\")\r\n    try {\r\n        const response = await axios.get(\"https://api.opencagedata.com/geocode/v1/json?key=efb8bfa10d614e67b5ba72a2934f6b25&q=\"+location+\"&pretty=1\");\r\n        return await response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\n\r\n// CREATE SLICE\r\nconst mapSlice = createSlice({\r\n  name: \"map\",\r\n  initialState: {\r\n    zoom: 3,\r\n    lat: 37.8,\r\n    lng: -96,\r\n    search: \"waiting\",\r\n  },\r\n  reducers: {\r\n    setZoom: (state, action) => {state.zoom = action.payload},\r\n    setDrawMode: (state, action) => {state.draw_mode = action.payload},\r\n    setSearch: (state, action) => {state.search = action.payload},\r\n    setCenter: (state, action) => {\r\n        state.lat = action.payload.lat;\r\n        state.lng = action.payload.lng;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getSearch.pending, (state) => {\r\n        state.loading = \"loading\";\r\n    });\r\n    builder.addCase(getSearch.fulfilled, (state, { payload }) => {\r\n        const lat = payload.results[0].geometry.lat\r\n        const lng = payload.results[0].geometry.lng\r\n\r\n        state.search = \"searching\";\r\n\r\n        state.lat = lat;\r\n        state.lng = lng;\r\n\r\n        state.loading = \"loaded\";\r\n\r\n        state.zoom = 10;\r\n    });\r\n    builder.addCase(getSearch.rejected,(state, action) => {\r\n        state.loading = \"error\";\r\n        state.error = action.error.message;\r\n    });\r\n  }\r\n});\r\n\r\nexport const {\r\n    setZoom,\r\n    setCenter,\r\n    setSearch,\r\n    setDrawMode\r\n} = mapSlice.actions;\r\n\r\nexport default mapSlice"]},"metadata":{},"sourceType":"module"}
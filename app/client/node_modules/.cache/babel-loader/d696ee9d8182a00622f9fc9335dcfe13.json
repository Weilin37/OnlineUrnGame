{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios'; // CREATE Thunk\n\nexport const getSimilarity = createAsyncThunk(\"analysis/getSimilarity\", async (endpoint, thunkAPI) => {\n  try {\n    const response = await axios.get(endpoint);\n    return response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const getSimilarityHistogram = createAsyncThunk(\"analysis/getSimilarityHistogram\", async (endpoint, thunkAPI) => {\n  try {\n    const response = await axios.get('/api/get/similarityhistogram');\n    return response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // CREATE SLICE\n\nconst analysisSlice = createSlice({\n  name: \"analysis\",\n  initialState: {\n    similarityHistogramData: [],\n    similarityData: {\n      'ds_similarity': '',\n      'city1': '',\n      'city2': '',\n      'state1': '',\n      'state2': ''\n    },\n    similarityCity1: \"\",\n    similarityCity2: \"\",\n    similarityState1: \"\",\n    similarityState2: \"\"\n  },\n  reducers: {\n    setSimilarityCity1: (state, action) => {\n      state.similarityCity1 = action.payload;\n    },\n    setSimilarityCity2: (state, action) => {\n      state.similarityCity2 = action.payload;\n    },\n    setSimilarityState1: (state, action) => {\n      state.similarityState1 = action.payload;\n    },\n    setSimilarityState2: (state, action) => {\n      state.similarityState2 = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    // global\n    builder.addCase(getSimilarity.pending, state => {\n      state.similarityData = {\n        'ds_similarity': '',\n        'city1': '',\n        'city2': '',\n        'state1': '',\n        'state2': ''\n      };\n    });\n    builder.addCase(getSimilarity.fulfilled, (state, {\n      payload\n    }) => {\n      state.similarityData['ds_similarity'] = payload[0]['ds_similarity'];\n      state.similarityData['city1'] = payload[0]['city1'];\n      state.similarityData['city2'] = payload[0]['city2'];\n      state.similarityData['state1'] = payload[0]['state1'];\n      state.similarityData['state2'] = payload[0]['state2'];\n    });\n    builder.addCase(getSimilarityHistogram.pending, state => {\n      state.similarityHistogramData = [];\n    });\n    builder.addCase(getSimilarityHistogram.fulfilled, (state, {\n      payload\n    }) => {\n      state.similarityHistogramData = payload;\n    });\n  }\n});\nexport const {\n  setSimilarityCity1,\n  setSimilarityCity2,\n  setSimilarityState1,\n  setSimilarityState2\n} = analysisSlice.actions;\nexport default analysisSlice;","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/features/analysisSlice.js"],"names":["createSlice","createAsyncThunk","axios","getSimilarity","endpoint","thunkAPI","response","get","data","error","rejectWithValue","message","getSimilarityHistogram","analysisSlice","name","initialState","similarityHistogramData","similarityData","similarityCity1","similarityCity2","similarityState1","similarityState2","reducers","setSimilarityCity1","state","action","payload","setSimilarityCity2","setSimilarityState1","setSimilarityState2","extraReducers","builder","addCase","pending","fulfilled","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\n\r\n// CREATE Thunk\r\nexport const getSimilarity = createAsyncThunk(\"analysis/getSimilarity\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\nexport const getSimilarityHistogram = createAsyncThunk(\"analysis/getSimilarityHistogram\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get('/api/get/similarityhistogram');\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\n// CREATE SLICE\r\nconst analysisSlice = createSlice({\r\n  name: \"analysis\",\r\n  initialState: {\r\n    similarityHistogramData: [],\r\n    similarityData: {'ds_similarity': '', 'city1':'','city2':'','state1':'','state2':''},\r\n    similarityCity1: \"\",\r\n    similarityCity2: \"\",\r\n    similarityState1: \"\",\r\n    similarityState2: \"\",\r\n  },\r\n  reducers: {\r\n    setSimilarityCity1: (state, action) => {state.similarityCity1 = action.payload;},\r\n    setSimilarityCity2: (state, action) => {state.similarityCity2 = action.payload;},\r\n    setSimilarityState1: (state, action) => {state.similarityState1 = action.payload;},\r\n    setSimilarityState2: (state, action) => {state.similarityState2 = action.payload;},\r\n  },\r\n  extraReducers: (builder) => {\r\n    // global\r\n    builder.addCase(getSimilarity.pending, (state) => {\r\n        state.similarityData = {'ds_similarity': '', 'city1':'','city2':'','state1':'','state2':''};\r\n    });\r\n    builder.addCase(getSimilarity.fulfilled, (state, { payload }) => {\r\n        state.similarityData['ds_similarity'] = payload[0]['ds_similarity'];\r\n        state.similarityData['city1'] = payload[0]['city1'];\r\n        state.similarityData['city2'] = payload[0]['city2'];\r\n        state.similarityData['state1'] = payload[0]['state1'];\r\n        state.similarityData['state2'] = payload[0]['state2'];\r\n    });\r\n    builder.addCase(getSimilarityHistogram.pending, (state) => {\r\n        state.similarityHistogramData = [];\r\n    });\r\n    builder.addCase(getSimilarityHistogram.fulfilled, (state, { payload }) => {\r\n        state.similarityHistogramData = payload;\r\n    });\r\n  }\r\n});\r\n\r\nexport const { setSimilarityCity1, setSimilarityCity2, setSimilarityState1, setSimilarityState2  } = analysisSlice.actions;\r\n\r\nexport default analysisSlice"]},"metadata":{},"sourceType":"module"}
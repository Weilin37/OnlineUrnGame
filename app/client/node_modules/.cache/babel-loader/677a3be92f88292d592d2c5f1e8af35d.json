{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\UrbanTreeConservation\\\\client\\\\src\\\\js\\\\components\\\\DrawAnalysisNative.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Grid from '@material-ui/core/Grid';\nconst useStyles = makeStyles(theme => ({\n  analysisMargin: {\n    margin: theme.spacing(1),\n    top: theme.spacing(7),\n    right: theme.spacing(1),\n    position: 'fixed',\n    zIndex: 1000,\n    width: 250,\n    padding: theme.spacing(1)\n  }\n})); // Custom map components\n\nconst DrawAnalysisNative = () => {\n  _s();\n\n  const stateMarker = useSelector(state => state.marker);\n  const classes = useStyles();\n\n  if (stateMarker.freedraw.length > 0 || stateMarker.view_status === \"city\" && stateMarker.city.length > 0) {\n    let freedata;\n    let freetotal;\n    let countFreeNonNative;\n    let countFreeNative;\n    let citydata;\n    let citytotal;\n    let countCityNonNative;\n    let countCityNative; //get native data\n\n    if (stateMarker.freedraw.length > 0) {\n      freedata = stateMarker.freedraw;\n      freetotal = freedata.length;\n      countFreeNonNative = freedata.reduce((cnt, row) => {\n        if (row.native === \"FALSE\") {\n          return cnt = cnt + 1;\n        } else {\n          return cnt;\n        }\n      }, 0);\n      countFreeNative = freedata.reduce((cnt, row) => {\n        if (row.native === \"TRUE\") {\n          return cnt = cnt + 1;\n        } else {\n          return cnt;\n        }\n      }, 0);\n    }\n\n    if (stateMarker.city.length > 0) {\n      data = stateMarker.global.filter(function (el) {\n        return el.city === stateMarker.city[0].city && el.state === stateMarker.city[0].state;\n      });\n      total = data[0].total_species;\n      countNonNative = data[0].count_non_native;\n      countNative = data[0].count_native;\n      console.log(data);\n    }\n\n    const marks = [{\n      value: countNative,\n      label: 'Native'\n    }, {\n      value: total,\n      label: (total / 1000).toFixed() + \"K\"\n    }];\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.analysisMargin,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justify: \"center\",\n        alignItems: \"center\",\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          align: \"center\",\n          xs: 10,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            children: \"Native Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            pb: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            defaultValue: countNative,\n            valueLabelDisplay: \"on\",\n            step: null,\n            min: 0,\n            max: total,\n            marks: marks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s(DrawAnalysisNative, \"KoC7UnmzeHDooJFsA0LaXCtNe6w=\", false, function () {\n  return [useSelector, useStyles];\n});\n\n_c = DrawAnalysisNative;\nexport default DrawAnalysisNative;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrawAnalysisNative\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/components/DrawAnalysisNative.js"],"names":["useSelector","makeStyles","Paper","Box","Typography","Slider","Grid","useStyles","theme","analysisMargin","margin","spacing","top","right","position","zIndex","width","padding","DrawAnalysisNative","stateMarker","state","marker","classes","freedraw","length","view_status","city","freedata","freetotal","countFreeNonNative","countFreeNative","citydata","citytotal","countCityNonNative","countCityNative","reduce","cnt","row","native","data","global","filter","el","total","total_species","countNonNative","count_non_native","countNative","count_native","console","log","marks","value","label","toFixed"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  analysisMargin: {\r\n    margin: theme.spacing(1),\r\n    top: theme.spacing(7),\r\n    right: theme.spacing(1),\r\n    position: 'fixed',\r\n    zIndex: 1000,\r\n    width: 250,\r\n    padding: theme.spacing(1),\r\n  }\r\n}));\r\n\r\n// Custom map components\r\nconst DrawAnalysisNative = () => {\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const classes = useStyles();\r\n\r\n    if ((stateMarker.freedraw.length > 0) || (stateMarker.view_status === \"city\" && stateMarker.city.length > 0)) {\r\n        let freedata;\r\n        let freetotal;\r\n        let countFreeNonNative;\r\n        let countFreeNative;\r\n\r\n        let citydata;\r\n        let citytotal;\r\n        let countCityNonNative;\r\n        let countCityNative;\r\n\r\n        //get native data\r\n        if (stateMarker.freedraw.length > 0) {\r\n            freedata = stateMarker.freedraw;\r\n            freetotal = freedata.length;\r\n\r\n            countFreeNonNative = freedata.reduce((cnt, row) => {\r\n                if (row.native === \"FALSE\") {\r\n                    return cnt = cnt+1;\r\n                } else {\r\n                    return cnt;\r\n                }\r\n            }, 0);\r\n\r\n            countFreeNative = freedata.reduce((cnt, row) => {\r\n                if (row.native === \"TRUE\") {\r\n                    return cnt = cnt+1;\r\n                } else {\r\n                    return cnt;\r\n                }\r\n            }, 0);\r\n        }\r\n\r\n        if (stateMarker.city.length > 0) {\r\n            data = stateMarker.global.filter(function (el) {\r\n              return el.city === stateMarker.city[0].city && el.state === stateMarker.city[0].state\r\n            });\r\n\r\n            total = data[0].total_species;\r\n            countNonNative = data[0].count_non_native;\r\n            countNative = data[0].count_native;\r\n            console.log(data);\r\n        }\r\n\r\n        const marks = [\r\n          {value: countNative,label: 'Native'},\r\n          {value: total,label: (total/1000).toFixed()+\"K\"},\r\n        ];\r\n\r\n        return(\r\n            <Paper className={classes.analysisMargin}>\r\n                <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                    <Grid item align=\"center\" xs={10} >\r\n                        <Typography gutterBottom>Native Distribution</Typography>\r\n                        <Box pb={5} />\r\n                        <Slider\r\n                            defaultValue={countNative}\r\n                            valueLabelDisplay=\"on\"\r\n                            step={null}\r\n                            min={0}\r\n                            max={total}\r\n                            marks={marks}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default DrawAnalysisNative;"]},"metadata":{},"sourceType":"module"}
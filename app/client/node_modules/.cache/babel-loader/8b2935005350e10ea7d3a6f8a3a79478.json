{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\UrbanTreeConservation\\\\client\\\\src\\\\js\\\\components\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport RescanMarkers from \"./RescanMarkers\";\nimport DrawBounds from \"./DrawBounds\";\nimport FreeDrawCustom from \"./FreeDrawCustom\";\nimport FreeDrawButtons from \"./FreeDrawButtons\";\nimport DrawAnalysisNative from \"./DrawAnalysisNative\";\nimport DrawSimilarityButtons from \"./DrawSimilarityButtons\";\nimport GetMarkers from \"./GetMarkers\";\nimport DataViewButtons from \"./DataViewButtons\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport \"../../css/app.css\";\nimport { useSelector, useDispatch, batch } from \"react-redux\";\nimport { getGlobal, getCity, getFreeDraw, setEndpoint, setViewStatus, clearCity, setScanStatus, setScanRadius, setScanCenter, setScanZoom } from \"../features/markerSlice\";\nimport { setSearch } from \"../features/mapSlice\";\nexport const LeafMap = () => {\n  _s();\n\n  const dispatch = useDispatch(); // state\n\n  const stateMarker = useSelector(state => state.marker);\n  const stateMap = useSelector(state => state.map);\n  const cityZoom = stateMarker.cityZoom; // Effects\n\n  useEffect(() => {\n    dispatch(getGlobal(stateMarker.endpoint));\n  }, [dispatch]); // render component\n\n  if (stateMarker.global.length > 0) {\n    return /*#__PURE__*/_jsxDEV(Map, {\n      doubleClickZoom: false,\n      preferCanvas: true,\n      center: [stateMap.lat, stateMap.lng],\n      zoom: stateMap.zoom,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DrawBounds, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(GetMarkers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(FreeDrawCustom, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DataViewButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DrawSimilarityButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Map, {\n      center: [stateMap.lat, stateMap.lng],\n      zoom: stateMap.zoom,\n      scrollWheelZoom: true,\n      children: /*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(LeafMap, \"P4w/7haOUwmmnQlgE8olLhv4nIw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = LeafMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeafMap\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/components/Map.js"],"names":["React","useEffect","RescanMarkers","DrawBounds","FreeDrawCustom","FreeDrawButtons","DrawAnalysisNative","DrawSimilarityButtons","GetMarkers","DataViewButtons","Map","TileLayer","useSelector","useDispatch","batch","getGlobal","getCity","getFreeDraw","setEndpoint","setViewStatus","clearCity","setScanStatus","setScanRadius","setScanCenter","setScanZoom","setSearch","LeafMap","dispatch","stateMarker","state","marker","stateMap","map","cityZoom","endpoint","global","length","lat","lng","zoom"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,eAA/B;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,KAAnC,QAAgD,aAAhD;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,WAA7B,EAA0CC,WAA1C,EAAuDC,aAAvD,EAAsEC,SAAtE,EAAiFC,aAAjF,EAAgGC,aAAhG,EAA+GC,aAA/G,EAA8HC,WAA9H,QAAiJ,yBAAjJ;AACA,SAASC,SAAT,QAA0B,sBAA1B;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAMC,QAAQ,GAAGd,WAAW,EAA5B,CADyB,CAGzB;;AACA,QAAMe,WAAW,GAAGhB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAA/B;AACA,QAAMC,QAAQ,GAAGnB,WAAW,CAACiB,KAAK,IAAIA,KAAK,CAACG,GAAhB,CAA5B;AAEA,QAAMC,QAAQ,GAAGL,WAAW,CAACK,QAA7B,CAPyB,CASzB;;AACAhC,EAAAA,SAAS,CAAC,MAAM;AACZ0B,IAAAA,QAAQ,CAACZ,SAAS,CAACa,WAAW,CAACM,QAAb,CAAV,CAAR;AACH,GAFQ,EAEN,CAACP,QAAD,CAFM,CAAT,CAVyB,CAczB;;AACA,MAAIC,WAAW,CAACO,MAAZ,CAAmBC,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,wBACI,QAAC,GAAD;AAAK,MAAA,eAAe,EAAE,KAAtB;AAA6B,MAAA,YAAY,EAAE,IAA3C;AAAiD,MAAA,MAAM,EAAE,CAACL,QAAQ,CAACM,GAAV,EAAeN,QAAQ,CAACO,GAAxB,CAAzD;AACA,MAAA,IAAI,EAAEP,QAAQ,CAACQ,IADf;AACqB,MAAA,eAAe,EAAE,IADtC;AAAA,8BAEE,QAAC,SAAD;AACE,QAAA,GAAG,EAAC;AADN;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cARF,eAUE,QAAC,qBAAD;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH,GAfD,MAeO;AACH,wBACI,QAAC,GAAD;AAAK,MAAA,MAAM,EAAE,CAACR,QAAQ,CAACM,GAAV,EAAeN,QAAQ,CAACO,GAAxB,CAAb;AAA2C,MAAA,IAAI,EAAEP,QAAQ,CAACQ,IAA1D;AAAgE,MAAA,eAAe,EAAE,IAAjF;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,GAAG,EAAC;AADN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;AAEJ,CAxCM;;GAAMb,O;UACQb,W,EAGGD,W,EACHA,W;;;KALRc,O","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport RescanMarkers from \"./RescanMarkers\";\r\nimport DrawBounds from \"./DrawBounds\";\r\nimport FreeDrawCustom from \"./FreeDrawCustom\";\r\nimport FreeDrawButtons from \"./FreeDrawButtons\";\r\nimport DrawAnalysisNative from \"./DrawAnalysisNative\";\r\nimport DrawSimilarityButtons from \"./DrawSimilarityButtons\";\r\nimport GetMarkers from \"./GetMarkers\";\r\nimport DataViewButtons from \"./DataViewButtons\";\r\nimport { Map, TileLayer } from \"react-leaflet\";\r\nimport \"../../css/app.css\";\r\nimport { useSelector, useDispatch, batch } from \"react-redux\";\r\nimport { getGlobal, getCity, getFreeDraw, setEndpoint, setViewStatus, clearCity, setScanStatus, setScanRadius, setScanCenter, setScanZoom } from \"../features/markerSlice\";\r\nimport { setSearch } from \"../features/mapSlice\";\r\n\r\nexport const LeafMap = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    // state\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateMap = useSelector(state => state.map);\r\n\r\n    const cityZoom = stateMarker.cityZoom;\r\n\r\n    // Effects\r\n    useEffect(() => {\r\n        dispatch(getGlobal(stateMarker.endpoint));\r\n    }, [dispatch]);\r\n\r\n    // render component\r\n    if (stateMarker.global.length > 0) {\r\n        return (\r\n            <Map doubleClickZoom={false} preferCanvas={true} center={[stateMap.lat, stateMap.lng]}\r\n            zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n              <DrawBounds />\r\n              <GetMarkers />\r\n              <FreeDrawCustom />\r\n              <DataViewButtons />\r\n\r\n              <DrawSimilarityButtons />\r\n            </Map>\r\n        );\r\n    } else {\r\n        return (\r\n            <Map center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n            </Map>\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
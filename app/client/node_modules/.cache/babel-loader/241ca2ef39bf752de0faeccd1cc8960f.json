{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\UrbanTreeConservation\\\\client\\\\src\\\\js\\\\components\\\\GetMarkers.js\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector, batch } from \"react-redux\";\nimport { Circle } from \"react-leaflet\";\nimport { Marker, Popup } from \"react-leaflet\";\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport HeatmapLayer from 'react-leaflet-heatmap-layer';\nimport PixiOverlay from 'react-leaflet-pixi-overlay';\nimport Slider from '@material-ui/core/Slider';\nimport { setSimilarityCity1, setSimilarityCity2, setSimilarityState1, setSimilarityState2 } from \"../features/analysisSlice\";\n\nconst GetMarkers = () => {\n  _s();\n\n  const stateMarker = useSelector(state => state.marker);\n  const stateAnalysis = useSelector(state => state.analysis);\n  const dispatch = useDispatch();\n\n  function handleClick(city, state) {\n    if (stateAnalysis.similarityCity1 === \"\") {\n      batch(() => {\n        dispatch(setSimilarityCity1(city));\n        dispatch(setSimilarityState1(state));\n      });\n    } else if (stateAnalysis.similarityCity2 === \"\") {\n      batch(() => {\n        dispatch(setSimilarityCity2(city));\n        dispatch(setSimilarityState2(state));\n      });\n    }\n  }\n\n  if (stateMarker.view_status === \"global\") {\n    return stateMarker.global.map((el, i) => /*#__PURE__*/_jsxDEV(Marker, {\n      position: [el.latitude, el.longitude],\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [el.city, \", \", el.state]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Number of Trees: \", el.total_species]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Number of Species: \", el.total_unique_species]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          pb: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          defaultValue: el.count_native,\n          step: null,\n          min: 0,\n          max: el.total_species,\n          valueLabelDisplay: \"on\",\n          marks: [{\n            value: el.count_native,\n            label: 'Native'\n          }, {\n            value: el.total_species,\n            label: (el.total_species / 1000).toFixed() + \"K\"\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => handleClick(el.city, el.state),\n          value: el.city,\n          variant: \"outlined\",\n          size: \"small\",\n          color: \"primary\",\n          children: \"Compare\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this));\n  } else if (stateMarker.view_status === \"city\") {\n    const markers = [{\n      id: 'randomStringOrNumber',\n      iconColor: 'red',\n      position: [47.57129246, -122.3848702],\n      popup: renderToString( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"All good!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }, this)),\n      onClick: () => alert('marker clicked'),\n      tooltip: 'Hey!'\n    }, {\n      id: '2',\n      iconColor: 'blue',\n      position: [47.69044913, 144.96332],\n      popup: 'Quack!',\n      popupOpen: true,\n      // if popup has to be open by default\n      onClick: () => alert('marker clicked'),\n      tooltip: 'Nice!'\n    }];\n    return /*#__PURE__*/_jsxDEV(PixiOverlay, {\n      markers: markers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  } else if (stateMarker.view_status === \"freedraw\") {\n    return stateMarker.freedraw.map((el, i) => /*#__PURE__*/_jsxDEV(Circle, {\n      center: [el.latitude, el.longitude],\n      radius: 5,\n      color: \"green\",\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"City: \", el.city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"State: \", el.state]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Scientific Name: \", el.scientific_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Native: \", el.native]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Condition: \", el.condition]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Diameter Breast Height (CM): \", el.diameter_breast_height_cm]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }, this));\n  } else {\n    return null;\n  }\n};\n\n_s(GetMarkers, \"xZOQogfd308Zrw/5Nr2qCAO+e4Y=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = GetMarkers;\nexport default GetMarkers;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetMarkers\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/components/GetMarkers.js"],"names":["useDispatch","useSelector","batch","Circle","Marker","Popup","Button","Box","HeatmapLayer","PixiOverlay","Slider","setSimilarityCity1","setSimilarityCity2","setSimilarityState1","setSimilarityState2","GetMarkers","stateMarker","state","marker","stateAnalysis","analysis","dispatch","handleClick","city","similarityCity1","similarityCity2","view_status","global","map","el","i","latitude","longitude","total_species","total_unique_species","count_native","value","label","toFixed","markers","id","iconColor","position","popup","renderToString","onClick","alert","tooltip","popupOpen","freedraw","scientific_name","native","condition","diameter_breast_height_cm"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector, batch } from \"react-redux\";\r\nimport { Circle } from \"react-leaflet\";\r\nimport { Marker, Popup } from \"react-leaflet\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport HeatmapLayer from 'react-leaflet-heatmap-layer';\r\nimport PixiOverlay from 'react-leaflet-pixi-overlay';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { setSimilarityCity1, setSimilarityCity2, setSimilarityState1, setSimilarityState2 } from \"../features/analysisSlice\";\r\n\r\nconst GetMarkers = () => {\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateAnalysis = useSelector(state => state.analysis);\r\n    const dispatch = useDispatch();\r\n\r\n    function handleClick(city, state) {\r\n        if (stateAnalysis.similarityCity1 === \"\") {\r\n            batch(() => {\r\n                dispatch(setSimilarityCity1(city));\r\n                dispatch(setSimilarityState1(state));\r\n            });\r\n        } else if (stateAnalysis.similarityCity2 === \"\") {\r\n            batch(() => {\r\n                dispatch(setSimilarityCity2(city));\r\n                dispatch(setSimilarityState2(state));\r\n            });\r\n        }\r\n    }\r\n\r\n    if (stateMarker.view_status === \"global\"){\r\n\r\n        return stateMarker.global.map((el, i) => (\r\n          <Marker\r\n            key={i}\r\n            position={[el.latitude, el.longitude]}\r\n          >\r\n            <Popup>\r\n                <p>{el.city}, {el.state}</p>\r\n                <p>Number of Trees: {el.total_species}</p>\r\n                <p>Number of Species: {el.total_unique_species}</p>\r\n                <Box pb={4} />\r\n                <Slider\r\n                    defaultValue={el.count_native}\r\n                    step={null}\r\n                    min={0}\r\n                    max={el.total_species}\r\n                    valueLabelDisplay=\"on\"\r\n                    marks={\r\n                        [\r\n                          {value: el.count_native,label: 'Native'},\r\n                          {value: el.total_species, label: (el.total_species/1000).toFixed()+\"K\"}\r\n                        ]\r\n                    }\r\n                />\r\n                <Button onClick={() => handleClick(el.city, el.state)} value={el.city} variant=\"outlined\" size=\"small\" color=\"primary\">\r\n                  Compare\r\n                </Button>\r\n            </Popup>\r\n          </Marker>\r\n        ));\r\n    } else if (stateMarker.view_status === \"city\")  {\r\n    const markers = [{\r\n            id: 'randomStringOrNumber',\r\n            iconColor: 'red',\r\n            position: [47.57129246, -122.3848702],\r\n            popup: renderToString(\r\n              <div>All good!</div>\r\n            ),\r\n            onClick: () => alert('marker clicked'),\r\n            tooltip: 'Hey!',\r\n        },\r\n        {\r\n            id: '2',\r\n            iconColor: 'blue',\r\n            position: [47.69044913, 144.96332],\r\n            popup: 'Quack!',\r\n            popupOpen: true, // if popup has to be open by default\r\n            onClick: () => alert('marker clicked'),\r\n            tooltip: 'Nice!',\r\n        }\r\n    ];\r\n\r\n        return (\r\n            <PixiOverlay markers={markers} />\r\n        )\r\n    } else if (stateMarker.view_status === \"freedraw\") {\r\n        return stateMarker.freedraw.map((el, i) => (\r\n                  <Circle key={i} center={[el.latitude, el.longitude]} radius={5} color={\"green\"}>\r\n                    <Popup>\r\n                        <p>City: {el.city}</p>\r\n                        <p>State: {el.state}</p>\r\n                        <p>Scientific Name: {el.scientific_name}</p>\r\n                        <p>Native: {el.native}</p>\r\n                        <p>Condition: {el.condition}</p>\r\n                        <p>Diameter Breast Height (CM): {el.diameter_breast_height_cm}</p>\r\n                    </Popup>\r\n                  </Circle>\r\n                ));\r\n    } else {\r\n        return null\r\n    }\r\n};\r\n\r\nexport default GetMarkers;"]},"metadata":{},"sourceType":"module"}
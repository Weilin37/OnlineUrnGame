{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\UrbanTreeConservation\\\\client\\\\src\\\\js\\\\components\\\\DrawAnalysisNative.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from \"react-redux\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Grid from '@material-ui/core/Grid';\nconst useStyles = makeStyles(theme => ({\n  analysisMargin: {\n    margin: theme.spacing(1),\n    top: theme.spacing(7),\n    right: theme.spacing(1),\n    position: 'fixed',\n    zIndex: 1000,\n    width: 250,\n    padding: theme.spacing(1)\n  }\n})); // Custom map components\n\nconst DrawAnalysisNative = () => {\n  _s();\n\n  const stateMarker = useSelector(state => state.marker);\n  const classes = useStyles();\n  let freedata;\n  let freetotal;\n  let countFreeNonNative;\n  let countFreeNative;\n  let freespeciescount;\n  let citydata;\n  let citytotal;\n  let countCityNonNative;\n  let countCityNative;\n  let citymarks;\n  let freemarks;\n\n  function sortSpecies(a, b) {\n    // Use toUpperCase() to ignore character casing\n    const bandA = a.band.toLowerCase();\n    const bandB = b.band.toLowerCase();\n    let comparison = 0;\n\n    if (bandA > bandB) {\n      comparison = 1;\n    } else if (bandA < bandB) {\n      comparison = -1;\n    }\n\n    return comparison;\n  }\n\n  if (stateMarker.freedraw.length > 0 || stateMarker.view_status === \"city\" && stateMarker.city.length > 0) {\n    //get native data\n    if (stateMarker.freedraw.length > 0) {\n      freedata = stateMarker.freedraw;\n      freetotal = freedata.length;\n      freespeciescount = freedata.reduce((p, c) => {\n        var species = c.scientific_name;\n\n        if (!p.hasOwnProperty(species)) {\n          p[species] = 0;\n        }\n\n        p[species]++;\n        return p;\n      }, {});\n      freespeciescount = console.log(freespeciescount);\n      countFreeNonNative = freedata.reduce((cnt, row) => {\n        if (row.native === \"FALSE\") {\n          return cnt = cnt + 1;\n        } else {\n          return cnt;\n        }\n      }, 0);\n      countFreeNative = freedata.reduce((cnt, row) => {\n        if (row.native === \"TRUE\") {\n          return cnt = cnt + 1;\n        } else {\n          return cnt;\n        }\n      }, 0);\n    }\n\n    if (stateMarker.city.length > 0) {\n      citydata = stateMarker.global.filter(function (el) {\n        return el.city === stateMarker.city[0].city && el.state === stateMarker.city[0].state;\n      });\n      citytotal = citydata[0].total_species;\n      countCityNonNative = citydata[0].count_non_native;\n      countCityNative = citydata[0].count_native;\n    }\n\n    citymarks = [{\n      value: countCityNative,\n      label: 'Native'\n    }, {\n      value: citytotal,\n      label: (citytotal / 1000).toFixed() + \"K\"\n    }];\n    freemarks = [{\n      value: countFreeNative,\n      label: 'Native'\n    }, {\n      value: freetotal,\n      label: freetotal\n    }];\n  }\n\n  if (stateMarker.freedraw.length > 0 && stateMarker.city.length > 0) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.analysisMargin,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justify: \"center\",\n        alignItems: \"center\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          align: \"center\",\n          xs: 10,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            children: \"City Native Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            pb: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            defaultValue: countCityNative,\n            valueLabelDisplay: \"on\",\n            step: null,\n            min: 0,\n            max: citytotal,\n            marks: citymarks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          align: \"center\",\n          xs: 10,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            children: \"Freedraw Native Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            pb: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            defaultValue: countFreeNative,\n            valueLabelDisplay: \"on\",\n            step: null,\n            min: 0,\n            max: freetotal,\n            marks: freemarks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this);\n  } else if (stateMarker.freedraw.length == 0 && stateMarker.city.length > 0) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.analysisMargin,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justify: \"center\",\n        alignItems: \"center\",\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          align: \"center\",\n          xs: 10,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            children: \"City Native Distribution\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            pb: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Slider, {\n            defaultValue: countCityNative,\n            valueLabelDisplay: \"on\",\n            step: null,\n            min: 0,\n            max: citytotal,\n            marks: citymarks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s(DrawAnalysisNative, \"KoC7UnmzeHDooJFsA0LaXCtNe6w=\", false, function () {\n  return [useSelector, useStyles];\n});\n\n_c = DrawAnalysisNative;\nexport default DrawAnalysisNative;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrawAnalysisNative\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/components/DrawAnalysisNative.js"],"names":["useSelector","makeStyles","Paper","Box","Typography","Slider","Grid","useStyles","theme","analysisMargin","margin","spacing","top","right","position","zIndex","width","padding","DrawAnalysisNative","stateMarker","state","marker","classes","freedata","freetotal","countFreeNonNative","countFreeNative","freespeciescount","citydata","citytotal","countCityNonNative","countCityNative","citymarks","freemarks","sortSpecies","a","b","bandA","band","toLowerCase","bandB","comparison","freedraw","length","view_status","city","reduce","p","c","species","scientific_name","hasOwnProperty","console","log","cnt","row","native","global","filter","el","total_species","count_non_native","count_native","value","label","toFixed"],"mappings":"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","sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  analysisMargin: {\r\n    margin: theme.spacing(1),\r\n    top: theme.spacing(7),\r\n    right: theme.spacing(1),\r\n    position: 'fixed',\r\n    zIndex: 1000,\r\n    width: 250,\r\n    padding: theme.spacing(1),\r\n  }\r\n}));\r\n\r\n// Custom map components\r\nconst DrawAnalysisNative = () => {\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const classes = useStyles();\r\n    let freedata;\r\n    let freetotal;\r\n    let countFreeNonNative;\r\n    let countFreeNative;\r\n    let freespeciescount;\r\n\r\n    let citydata;\r\n    let citytotal;\r\n    let countCityNonNative;\r\n    let countCityNative;\r\n\r\n    let citymarks;\r\n    let freemarks;\r\n\r\n    function sortSpecies(a, b) {\r\n      // Use toUpperCase() to ignore character casing\r\n      const bandA = a.band.toLowerCase();\r\n      const bandB = b.band.toLowerCase();\r\n\r\n      let comparison = 0;\r\n      if (bandA > bandB) {\r\n        comparison = 1;\r\n      } else if (bandA < bandB) {\r\n        comparison = -1;\r\n      }\r\n      return comparison;\r\n    }\r\n\r\n    if ((stateMarker.freedraw.length > 0) || (stateMarker.view_status === \"city\" && stateMarker.city.length > 0)) {\r\n\r\n        //get native data\r\n        if (stateMarker.freedraw.length > 0) {\r\n            freedata = stateMarker.freedraw;\r\n            freetotal = freedata.length;\r\n            freespeciescount = freedata.reduce((p,c) => {\r\n                var species = c.scientific_name;\r\n                if (!p.hasOwnProperty(species)) {\r\n                    p[species] = 0;\r\n                }\r\n                p[species]++;\r\n                return p;\r\n            }, {});\r\n            freespeciescount =\r\n            console.log(freespeciescount);\r\n\r\n            countFreeNonNative = freedata.reduce((cnt, row) => {\r\n                if (row.native === \"FALSE\") {\r\n                    return cnt = cnt+1;\r\n                } else {\r\n                    return cnt;\r\n                }\r\n            }, 0);\r\n\r\n            countFreeNative = freedata.reduce((cnt, row) => {\r\n                if (row.native === \"TRUE\") {\r\n                    return cnt = cnt+1;\r\n                } else {\r\n                    return cnt;\r\n                }\r\n            }, 0);\r\n        }\r\n\r\n        if (stateMarker.city.length > 0) {\r\n            citydata = stateMarker.global.filter(function (el) {\r\n              return el.city === stateMarker.city[0].city && el.state === stateMarker.city[0].state\r\n            });\r\n\r\n            citytotal = citydata[0].total_species;\r\n            countCityNonNative = citydata[0].count_non_native;\r\n            countCityNative = citydata[0].count_native;\r\n        }\r\n\r\n        citymarks = [\r\n          {value: countCityNative,label: 'Native'},\r\n          {value: citytotal,label: (citytotal/1000).toFixed()+\"K\"},\r\n        ];\r\n\r\n        freemarks = [\r\n          {value: countFreeNative,label: 'Native'},\r\n          {value: freetotal,label: freetotal},\r\n        ];\r\n\r\n    }\r\n\r\n    if (stateMarker.freedraw.length > 0 && stateMarker.city.length > 0) {\r\n         return(\r\n            <Paper className={classes.analysisMargin}>\r\n                <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                    <Grid item align=\"center\" xs={10} >\r\n                        <Typography gutterBottom>City Native Distribution</Typography>\r\n                        <Box pb={5} />\r\n                        <Slider\r\n                            defaultValue={countCityNative}\r\n                            valueLabelDisplay=\"on\"\r\n                            step={null}\r\n                            min={0}\r\n                            max={citytotal}\r\n                            marks={citymarks}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item align=\"center\" xs={10} >\r\n                        <Typography gutterBottom>Freedraw Native Distribution</Typography>\r\n                        <Box pb={5} />\r\n                        <Slider\r\n                            defaultValue={countFreeNative}\r\n                            valueLabelDisplay=\"on\"\r\n                            step={null}\r\n                            min={0}\r\n                            max={freetotal}\r\n                            marks={freemarks}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n         )\r\n    } else if (stateMarker.freedraw.length == 0 && stateMarker.city.length > 0) {\r\n        return(\r\n            <Paper className={classes.analysisMargin}>\r\n                <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                    <Grid item align=\"center\" xs={10} >\r\n                        <Typography gutterBottom>City Native Distribution</Typography>\r\n                        <Box pb={5} />\r\n                        <Slider\r\n                            defaultValue={countCityNative}\r\n                            valueLabelDisplay=\"on\"\r\n                            step={null}\r\n                            min={0}\r\n                            max={citytotal}\r\n                            marks={citymarks}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default DrawAnalysisNative;"]},"metadata":{},"sourceType":"module"}
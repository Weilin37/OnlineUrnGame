{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\InsectTrade\\\\app\\\\client\\\\src\\\\js\\\\components\\\\FilterControls.js\",\n    _s = $RefreshSig$();\n\nimport { useLeaflet } from \"react-leaflet\";\nimport L from 'leaflet';\nimport '@elfalem/leaflet-curve';\nimport { useDispatch, useSelector, batch } from \"react-redux\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { setFilteredSpecies } from \"../features/markerSlice\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nconst useStyles = makeStyles(theme => ({\n  autocomplete: {\n    margin: theme.spacing(1),\n    top: theme.spacing(8),\n    right: theme.spacing(1),\n    position: 'fixed',\n    backgroundColor: 'white',\n    zIndex: 1000\n  }\n}));\n\nconst FilterControls = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const stateMarker = useSelector(state => state.marker);\n  const species_array = [...new Set(stateMarker.data.map(a => a.species))];\n  var species = [];\n\n  for (var i = 0; i < species_array.length; i++) {\n    species.push({\n      \"species\": species_array[i]\n    });\n  }\n\n  function setSpecies(species) {\n    dispatch(setFilteredSpecies(newValue.species));\n  }\n\n  map.eachLayer(function (layer) {\n    if (layer._path != null) {\n      console.log(layer._path.getAttribute(\"class\"));\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"species\",\n    size: \"small\",\n    onChange: (event, newValue) => {\n      setSpecies(newValue);\n    },\n    defaultValue: stateMarker.filtered_species,\n    options: species,\n    className: classes.autocomplete,\n    getOptionLabel: option => option.species,\n    style: {\n      width: 250\n    },\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"species\",\n      variant: \"outlined\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 36\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FilterControls, \"L8vem4JuppxL6TZdcDZy7/9ZOkY=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n\n_c = FilterControls;\nexport default FilterControls;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterControls\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/InsectTrade/app/client/src/js/components/FilterControls.js"],"names":["useLeaflet","L","useDispatch","useSelector","batch","makeStyles","setFilteredSpecies","TextField","Autocomplete","useStyles","theme","autocomplete","margin","spacing","top","right","position","backgroundColor","zIndex","FilterControls","classes","dispatch","stateMarker","state","marker","species_array","Set","data","map","a","species","i","length","push","setSpecies","newValue","eachLayer","layer","_path","console","log","getAttribute","event","filtered_species","option","width","params"],"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAO,wBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,KAAnC,QAAgD,aAAhD;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAASC,kBAAT,QAAmC,yBAAnC;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,MAAMC,SAAS,GAAGJ,UAAU,CAAEK,KAAD,KAAY;AACvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADI;AAEZC,IAAAA,GAAG,EAAEJ,KAAK,CAACG,OAAN,CAAc,CAAd,CAFO;AAGZE,IAAAA,KAAK,EAAEL,KAAK,CAACG,OAAN,CAAc,CAAd,CAHK;AAIZG,IAAAA,QAAQ,EAAE,OAJE;AAKZC,IAAAA,eAAe,EAAE,OALL;AAMZC,IAAAA,MAAM,EAAE;AANI;AADyB,CAAZ,CAAD,CAA5B;;AAWA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AACzB,QAAMC,OAAO,GAAGX,SAAS,EAAzB;AACA,QAAMY,QAAQ,GAAGnB,WAAW,EAA5B;AACA,QAAMoB,WAAW,GAAGnB,WAAW,CAACoB,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAA/B;AACA,QAAMC,aAAa,GAAG,CAAC,GAAI,IAAIC,GAAJ,CAAQJ,WAAW,CAACK,IAAZ,CAAiBC,GAAjB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,OAA5B,CAAR,CAAL,CAAtB;AAEA,MAAIA,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACN,aAAa,CAACO,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCD,IAAAA,OAAO,CAACG,IAAR,CAAa;AAAC,iBAAUR,aAAa,CAACM,CAAD;AAAxB,KAAb;AACH;;AAED,WAASG,UAAT,CAAoBJ,OAApB,EAA6B;AACzBT,IAAAA,QAAQ,CAACf,kBAAkB,CAAC6B,QAAQ,CAACL,OAAV,CAAnB,CAAR;AACH;;AAGGF,EAAAA,GAAG,CAACQ,SAAJ,CAAc,UAASC,KAAT,EAAgB;AAC9B,QAAIA,KAAK,CAACC,KAAN,IAAe,IAAnB,EAAyB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACC,KAAN,CAAYG,YAAZ,CAAyB,OAAzB,CAAZ;AACH;AACJ,GAJG;AAMJ,sBACI,QAAC,YAAD;AACE,IAAA,EAAE,EAAC,SADL;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,QAAQ,EAAE,CAACC,KAAD,EAAQP,QAAR,KAAqB;AAACD,MAAAA,UAAU,CAACC,QAAD,CAAV;AAAsB,KAHxD;AAIE,IAAA,YAAY,EAAEb,WAAW,CAACqB,gBAJ5B;AAKE,IAAA,OAAO,EAAEb,OALX;AAME,IAAA,SAAS,EAAEV,OAAO,CAACT,YANrB;AAOE,IAAA,cAAc,EAAGiC,MAAD,IAAYA,MAAM,CAACd,OAPrC;AAQE,IAAA,KAAK,EAAE;AAAEe,MAAAA,KAAK,EAAE;AAAT,KART;AASE,IAAA,WAAW,EAAGC,MAAD,iBAAY,QAAC,SAAD,OAAeA,MAAf;AAAuB,MAAA,KAAK,EAAC,SAA7B;AAAuC,MAAA,OAAO,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA;AAT3B;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CApCD;;GAAM3B,c;UACcV,S,EACCP,W,EACGC,W;;;KAHlBgB,c;AAsCN,eAAeA,cAAf","sourcesContent":["import { useLeaflet } from \"react-leaflet\";\r\nimport L from 'leaflet'\r\nimport '@elfalem/leaflet-curve'\r\nimport { useDispatch, useSelector, batch } from \"react-redux\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { setFilteredSpecies } from \"../features/markerSlice\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  autocomplete: {\r\n    margin: theme.spacing(1),\r\n    top: theme.spacing(8),\r\n    right: theme.spacing(1),\r\n    position: 'fixed',\r\n    backgroundColor: 'white',\r\n    zIndex: 1000,\r\n  }\r\n}));\r\n\r\nconst FilterControls = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const species_array = [... new Set(stateMarker.data.map(a => a.species))];\r\n\r\n    var species = [];\r\n    for (var i = 0; i<species_array.length; i++) {\r\n        species.push({\"species\":species_array[i]});\r\n    }\r\n\r\n    function setSpecies(species) {\r\n        dispatch(setFilteredSpecies(newValue.species));\r\n    }\r\n\r\n\r\n        map.eachLayer(function(layer) {\r\n        if (layer._path != null) {\r\n            console.log(layer._path.getAttribute(\"class\"));\r\n        }\r\n    });\r\n\r\n    return (\r\n        <Autocomplete\r\n          id=\"species\"\r\n          size=\"small\"\r\n          onChange={(event, newValue) => {setSpecies(newValue);}}\r\n          defaultValue={stateMarker.filtered_species}\r\n          options={species}\r\n          className={classes.autocomplete}\r\n          getOptionLabel={(option) => option.species}\r\n          style={{ width: 250 }}\r\n          renderInput={(params) => <TextField {...params} label=\"species\" variant=\"outlined\" />}\r\n        />\r\n    );\r\n\r\n}\r\n\r\nexport default FilterControls;"]},"metadata":{},"sourceType":"module"}
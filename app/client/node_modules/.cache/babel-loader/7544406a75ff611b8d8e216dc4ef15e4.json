{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\InsectTrade\\\\app\\\\client\\\\src\\\\js\\\\components\\\\Locations.js\",\n    _s = $RefreshSig$();\n\nimport { useLeaflet, CircleMarker } from \"react-leaflet\";\nimport L from 'leaflet';\nimport { useSelector } from \"react-redux\";\nimport haversine from 'haversine-distance';\n\nconst Locations = () => {\n  _s();\n\n  const {\n    map\n  } = useLeaflet();\n  const stateMarker = useSelector(state => state.marker);\n\n  function arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length !== b.length) return false; // If you don't care about the order of the elements inside\n    // the array, you should sort both arrays here.\n    // Please note that calling sort on an array will modify that array.\n    // you might want to clone your array first.\n\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  }\n\n  function calculateDistance(lat1, lng1, lat2, lng2) {\n    return Math.sqrt((lat1 - lat2) ** 2 + (lng1 - lng2) ** 2);\n  } // get sellers\n\n\n  var sellers = [];\n  var origins = [];\n\n  for (var i in stateMarker.filtered_data) {\n    var seller_original = true;\n    var seller_latitude = stateMarker.filtered_data[i].latitude;\n    var seller_longitude = stateMarker.filtered_data[i].longitude;\n    var alt_seller_longitude = seller_longitude;\n    var origin_original = true;\n    var origin_latitude = stateMarker.filtered_data[i].origin_latitude;\n    var origin_longitude = stateMarker.filtered_data[i].origin_longitude;\n    var alt_origin_longitude = origin_longitude;\n    /*if ((seller_longitude-origin_longitude) < -180) {\r\n        if (origin_longitude < 0) {origin_longitude = origin_longitude+360}\r\n        else if (seller_longitude < 0) {seller_longitude = seller_longitude+360}\r\n    }*/\n\n    if (seller_longitude - origin_longitude <= -180) {\n      if (origin_longitude < 0) {\n        alt_origin_longitude = origin_longitude + 360;\n      } else if (seller_longitude < 0) {\n        alt_seller_longitude = seller_longitude + 360;\n      }\n\n      var distance = calculateDistance(seller_latitude, seller_longitude, origin_latitude, origin_longitude);\n      var alt_distance = calculateDistance(seller_latitude, alt_seller_longitude, origin_latitude, alt_origin_longitude);\n\n      if (alt_distance < distance) {\n        origin_longitude = alt_origin_longitude;\n        seller_longitude = alt_seller_longitude;\n      }\n    }\n\n    var seller_coordinates = [seller_latitude, seller_longitude];\n    var origin_coordinates = [origin_latitude, origin_longitude];\n\n    for (var j in sellers) {\n      if (arraysEqual(sellers[j], seller_coordinates)) {\n        seller_original = false;\n      }\n    }\n\n    for (var k in origins) {\n      if (arraysEqual(origins[k], origin_coordinates)) {\n        origin_original = false;\n      }\n    }\n\n    if (seller_original === true) {\n      sellers.push(seller_coordinates);\n    }\n\n    if (origin_original === true) {\n      origins.push(origin_coordinates);\n    }\n  } // get origins\n\n  /*var origins = [];\r\n  for (var i in stateMarker.filtered_data) {\r\n      var original = true;\r\n      var latitude = stateMarker.filtered_data[i].origin_latitude;\r\n      var longitude = stateMarker.filtered_data[i].origin_longitude;\r\n      //if (longitude < -14) {longitude = longitude+360}\r\n      var coordinates = [latitude, longitude];\r\n      for (var j in origins) {\r\n          if (arraysEqual(origins[j],coordinates)) {original=false}\r\n      }\r\n      if (original === true){\r\n          origins.push(coordinates)\r\n      }\r\n  }*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [sellers.map(function (coordinates, index) {\n      return /*#__PURE__*/_jsxDEV(CircleMarker, {\n        center: coordinates,\n        fillOpacity: 0.5,\n        radius: 5,\n        color: 'red',\n        stroke: false\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this);\n    }), origins.map(function (coordinates, index) {\n      return /*#__PURE__*/_jsxDEV(CircleMarker, {\n        center: coordinates,\n        fillOpacity: 0.5,\n        radius: 5,\n        color: 'blue',\n        stroke: false\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Locations, \"MSwarOdHxI5QI54a703war+9GWw=\", false, function () {\n  return [useLeaflet, useSelector];\n});\n\n_c = Locations;\nexport default Locations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Locations\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/InsectTrade/app/client/src/js/components/Locations.js"],"names":["useLeaflet","CircleMarker","L","useSelector","haversine","Locations","map","stateMarker","state","marker","arraysEqual","a","b","length","i","calculateDistance","lat1","lng1","lat2","lng2","Math","sqrt","sellers","origins","filtered_data","seller_original","seller_latitude","latitude","seller_longitude","longitude","alt_seller_longitude","origin_original","origin_latitude","origin_longitude","alt_origin_longitude","distance","alt_distance","seller_coordinates","origin_coordinates","j","k","push","coordinates","index"],"mappings":"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","sourcesContent":["import { useLeaflet, CircleMarker } from \"react-leaflet\";\r\nimport L from 'leaflet'\r\nimport { useSelector } from \"react-redux\";\r\nimport haversine from 'haversine-distance';\r\n\r\nconst Locations = () => {\r\n    const { map } = useLeaflet();\r\n    const stateMarker = useSelector(state => state.marker);\r\n\r\n    function arraysEqual(a, b) {\r\n        if (a === b) return true;\r\n        if (a == null || b == null) return false;\r\n        if (a.length !== b.length) return false;\r\n\r\n        // If you don't care about the order of the elements inside\r\n        // the array, you should sort both arrays here.\r\n        // Please note that calling sort on an array will modify that array.\r\n        // you might want to clone your array first.\r\n\r\n        for (var i = 0; i < a.length; ++i) {\r\n            if (a[i] !== b[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function calculateDistance(lat1,lng1,lat2,lng2) {\r\n        return Math.sqrt(((lat1-lat2)**2) + ((lng1-lng2)**2))\r\n    }\r\n\r\n    // get sellers\r\n    var sellers = [];\r\n    var origins = [];\r\n    for (var i in stateMarker.filtered_data) {\r\n        var seller_original = true;\r\n        var seller_latitude = stateMarker.filtered_data[i].latitude;\r\n        var seller_longitude = stateMarker.filtered_data[i].longitude;\r\n        var alt_seller_longitude = seller_longitude;\r\n\r\n        var origin_original = true;\r\n        var origin_latitude = stateMarker.filtered_data[i].origin_latitude;\r\n        var origin_longitude = stateMarker.filtered_data[i].origin_longitude;\r\n        var alt_origin_longitude = origin_longitude;\r\n\r\n        /*if ((seller_longitude-origin_longitude) < -180) {\r\n            if (origin_longitude < 0) {origin_longitude = origin_longitude+360}\r\n            else if (seller_longitude < 0) {seller_longitude = seller_longitude+360}\r\n        }*/\r\n\r\n        if ((seller_longitude-origin_longitude) <= -180) {\r\n            if (origin_longitude < 0) {alt_origin_longitude = origin_longitude+360}\r\n            else if (seller_longitude < 0) {alt_seller_longitude = seller_longitude+360}\r\n\r\n            var distance = calculateDistance(seller_latitude,seller_longitude,origin_latitude,origin_longitude);\r\n            var alt_distance = calculateDistance(seller_latitude,alt_seller_longitude,origin_latitude,alt_origin_longitude);\r\n\r\n            if (alt_distance < distance) {\r\n                origin_longitude = alt_origin_longitude;\r\n                seller_longitude = alt_seller_longitude;\r\n            }\r\n        }\r\n\r\n        var seller_coordinates = [seller_latitude, seller_longitude];\r\n        var origin_coordinates = [origin_latitude, origin_longitude];\r\n\r\n        for (var j in sellers) {\r\n            if (arraysEqual(sellers[j],seller_coordinates)) {seller_original=false}\r\n        }\r\n\r\n        for (var k in origins) {\r\n            if (arraysEqual(origins[k],origin_coordinates)) {origin_original=false}\r\n        }\r\n\r\n        if (seller_original === true){\r\n            sellers.push(seller_coordinates)\r\n        }\r\n\r\n        if (origin_original === true){\r\n            origins.push(origin_coordinates)\r\n        }\r\n    }\r\n\r\n    // get origins\r\n    /*var origins = [];\r\n    for (var i in stateMarker.filtered_data) {\r\n        var original = true;\r\n        var latitude = stateMarker.filtered_data[i].origin_latitude;\r\n        var longitude = stateMarker.filtered_data[i].origin_longitude;\r\n        //if (longitude < -14) {longitude = longitude+360}\r\n        var coordinates = [latitude, longitude];\r\n        for (var j in origins) {\r\n            if (arraysEqual(origins[j],coordinates)) {original=false}\r\n        }\r\n        if (original === true){\r\n            origins.push(coordinates)\r\n        }\r\n    }*/\r\n\r\n    return(\r\n        <div>\r\n            {sellers.map(function(coordinates,index) {\r\n                return(\r\n                    <CircleMarker\r\n                        key={index}\r\n                        center={coordinates}\r\n                        fillOpacity={0.5}\r\n                        radius={5}\r\n                        color={'red'}\r\n                        stroke={false}\r\n                    />\r\n                )\r\n            })}\r\n            {origins.map(function(coordinates,index) {\r\n                return(\r\n                    <CircleMarker\r\n                        key={index}\r\n                        center={coordinates}\r\n                        fillOpacity={0.5}\r\n                        radius={5}\r\n                        color={'blue'}\r\n                        stroke={false}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Locations;"]},"metadata":{},"sourceType":"module"}
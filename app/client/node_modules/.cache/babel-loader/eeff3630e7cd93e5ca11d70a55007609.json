{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useLeaflet } from \"react-leaflet\";\nimport L from 'leaflet';\nimport '@elfalem/leaflet-curve';\nimport { useSelector } from \"react-redux\";\n\nconst Arches = () => {\n  _s();\n\n  const {\n    map\n  } = useLeaflet();\n  const stateMarker = useSelector(state => state.marker);\n  var durationBase = 2000;\n  var duration = Math.sqrt(Math.log(r)) * durationBase;\n  var pathOptions = {\n    color: 'rgba(255,255,255,0.5)',\n    weight: 2\n  };\n  pathOptions.animate = {\n    duration: duration,\n    iterations: Infinity,\n    easing: 'ease-in-out',\n    direction: 'alternate'\n  };\n\n  function calculateCurve(lat1, lng1, lat2, lng2) {\n    var latlng1 = [lat1, lng1];\n    var latlng2 = [lat2, lng2];\n    var offsetX = latlng2[1] - latlng1[1];\n    var offsetY = latlng2[0] - latlng1[0];\n    var r = Math.sqrt(Math.pow(offsetX, 2) + Math.pow(offsetY, 2)),\n        theta = Math.atan2(offsetY, offsetX);\n    var thetaOffset = 3.14 / 10;\n    var r2 = r / 2 / Math.cos(thetaOffset);\n    var theta2 = theta + thetaOffset;\n    var midpointX = r2 * Math.cos(theta2) + latlng1[1];\n    var midpointY = r2 * Math.sin(theta2) + latlng1[0];\n    var midpointLatLng = [midpointY, midpointX];\n    return {\n      'latlng1': latlng1,\n      'midpointLatLng': midpointLatLng,\n      'latlng2': latlng2\n    };\n  }\n\n  for (var i = 0; i < stateMarker.data.length; i++) {\n    var lat1 = stateMarker.data[i].origin_latitude;\n    var lng1 = stateMarker.data[i].origin_longitude;\n    var lat2 = stateMarker.data[i].latitude;\n    var lng2 = stateMarker.data[i].longitude;\n    var coordinates = calculateCurve(lat1, lng1, lat2, lng2);\n    var curvedPath = L.curve(['M', coordinates['latlng1'], 'Q', coordinates['midpointLatLng'], coordinates['latlng2']], pathOptions).addTo(map);\n  }\n\n  console.log(stateMarker.data);\n  console.log(map);\n  return null;\n};\n\n_s(Arches, \"MSwarOdHxI5QI54a703war+9GWw=\", false, function () {\n  return [useLeaflet, useSelector];\n});\n\n_c = Arches;\nexport default Arches;\n\nvar _c;\n\n$RefreshReg$(_c, \"Arches\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/InsectTrade/app/client/src/js/components/Arches.js"],"names":["useLeaflet","L","useSelector","Arches","map","stateMarker","state","marker","durationBase","duration","Math","sqrt","log","r","pathOptions","color","weight","animate","iterations","Infinity","easing","direction","calculateCurve","lat1","lng1","lat2","lng2","latlng1","latlng2","offsetX","offsetY","pow","theta","atan2","thetaOffset","r2","cos","theta2","midpointX","midpointY","sin","midpointLatLng","i","data","length","origin_latitude","origin_longitude","latitude","longitude","coordinates","curvedPath","curve","addTo","console"],"mappings":"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","sourcesContent":["import { useLeaflet } from \"react-leaflet\";\r\nimport L from 'leaflet'\r\nimport '@elfalem/leaflet-curve'\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Arches = () => {\r\n    const { map } = useLeaflet();\r\n    const stateMarker = useSelector(state => state.marker);\r\n    var durationBase = 2000;\r\n   \tvar duration = Math.sqrt(Math.log(r)) * durationBase;\r\n\r\n    var pathOptions = {\r\n        color: 'rgba(255,255,255,0.5)',\r\n        weight: 2\r\n    }\r\n\r\n  \tpathOptions.animate = {\r\n\t\tduration: duration,\r\n\t\titerations: Infinity,\r\n\t\teasing: 'ease-in-out',\r\n\t\tdirection: 'alternate'\r\n\t}\r\n\r\n    function calculateCurve(lat1, lng1, lat2, lng2) {\r\n        var latlng1 = [lat1,lng1];\r\n        var latlng2 = [lat2,lng2];\r\n        var offsetX = latlng2[1] - latlng1[1];\r\n        var offsetY = latlng2[0] - latlng1[0];\r\n\r\n        var r = Math.sqrt( Math.pow(offsetX, 2) + Math.pow(offsetY, 2) ),\r\n            theta = Math.atan2(offsetY, offsetX);\r\n\r\n        var thetaOffset = (3.14/10);\r\n\r\n        var r2 = (r/2)/(Math.cos(thetaOffset));\r\n        var theta2 = theta + thetaOffset;\r\n\r\n        var midpointX = (r2 * Math.cos(theta2)) + latlng1[1];\r\n        var midpointY = (r2 * Math.sin(theta2)) + latlng1[0];\r\n\r\n        var midpointLatLng = [midpointY, midpointX];\r\n\r\n        return {'latlng1': latlng1, 'midpointLatLng': midpointLatLng, 'latlng2': latlng2}\r\n    }\r\n\r\n    for (var i = 0; i < stateMarker.data.length; i++) {\r\n        var lat1 = stateMarker.data[i].origin_latitude;\r\n        var lng1 = stateMarker.data[i].origin_longitude;\r\n        var lat2 = stateMarker.data[i].latitude;\r\n        var lng2 = stateMarker.data[i].longitude;\r\n        var coordinates = calculateCurve(lat1,lng1,lat2,lng2);\r\n\r\n        var curvedPath = L.curve(\r\n        [\r\n            'M', coordinates['latlng1'],\r\n            'Q', coordinates['midpointLatLng'],\r\n                 coordinates['latlng2']\r\n        ], pathOptions).addTo(map);\r\n    }\r\n\r\n    console.log(stateMarker.data)\r\n    console.log(map);\r\n\r\n    return null\r\n\r\n}\r\n\r\nexport default Arches;"]},"metadata":{},"sourceType":"module"}
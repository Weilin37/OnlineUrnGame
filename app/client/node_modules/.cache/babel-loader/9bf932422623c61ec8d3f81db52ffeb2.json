{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\UrbanTreeConservation\\\\client\\\\src\\\\js\\\\components\\\\RescanMarkers.js\",\n    _s = $RefreshSig$();\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AdjustIcon from '@material-ui/icons/Adjust';\nimport { useDispatch, useSelector, batch } from \"react-redux\";\nimport { useLeaflet } from \"react-leaflet\";\nimport { NONE } from 'react-leaflet-freedraw';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { setEndpoint, clearCity, setScanStatus, setScanRadius, setScanCenter, setScanZoom, setViewStatus } from \"../features/markerSlice\";\nimport { setDrawMode, setSearch } from \"../features/mapSlice\";\nconst useStyles = makeStyles(theme => ({\n  scanMargin: {\n    margin: theme.spacing(1),\n    top: theme.spacing(28),\n    left: theme.spacing(1),\n    position: 'fixed',\n    zIndex: 1000\n  }\n}));\n\nconst RescanMarkers = () => {\n  _s();\n\n  const stateMarker = useSelector(state => state.marker);\n  const dispatch = useDispatch(); // classes\n\n  const classes = useStyles();\n  const {\n    map\n  } = useLeaflet();\n\n  function toRadian(degree) {\n    return degree * Math.PI / 180;\n  }\n\n  function getDistance(origin, destination) {\n    // return distance in meters\n    var lon1 = toRadian(origin[1]),\n        lat1 = toRadian(origin[0]),\n        lon2 = toRadian(destination[1]),\n        lat2 = toRadian(destination[0]);\n    var deltaLat = lat2 - lat1;\n    var deltaLon = lon2 - lon1;\n    var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    var EARTH_RADIUS = 6371;\n    return c * EARTH_RADIUS * 1000;\n  }\n\n  function handleclick(e) {\n    if (stateMarker.view_status === \"city\" || stateMarker.view_status === \"global\") {\n      if (map.getZoom() < stateMarker.cityZoom) {\n        map.setZoom(stateMarker.cityZoom);\n      }\n\n      const zoom = map.getZoom();\n      const center = map.getCenter();\n      const lat = center.lat;\n      const lng = center.lng;\n      const bounds = map.getBounds();\n      const latNE = bounds['_northEast'].lat;\n      const lngNE = bounds['_northEast'].lng;\n      const radius = Math.round(0.5 * getDistance([latNE, lngNE], [lat, lng]));\n      batch(() => {\n        dispatch(clearCity());\n        dispatch(setScanRadius(radius));\n        dispatch(setScanCenter({\n          lat: lat,\n          lng: lng\n        }));\n        dispatch(setSearch(\"waiting\"));\n\n        if (zoom < stateMarker.cityZoom) {\n          dispatch(setScanZoom(stateMarker.cityZoom));\n        } else {\n          dispatch(setScanZoom(zoom));\n        }\n\n        dispatch(setViewStatus(\"city\"));\n        dispatch(setEndpoint({\n          type: \"city\",\n          lat: lat,\n          lng: lng,\n          radius: radius,\n          limit: 1000\n        }));\n        dispatch(setScanStatus(\"scanning\"));\n      });\n    } else if (stateMarker.view_status === \"freedraw\") {\n      if (stateMarker.endpoint.length > 0) {\n        batch(() => {\n          dispatch(setViewStatus(\"freedraw\"));\n          dispatch(setScanStatus(\"scanning\"));\n          dispatch(setDrawMode(NONE));\n        });\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Fab, {\n      onClick: handleclick,\n      size: \"small\",\n      color: \"primary\",\n      \"aria-label\": \"add\",\n      className: classes.scanMargin,\n      children: /*#__PURE__*/_jsxDEV(AdjustIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RescanMarkers, \"2qhJ1Zd+ly5uAoyPOIAoiJbnDYE=\", false, function () {\n  return [useSelector, useDispatch, useStyles, useLeaflet];\n});\n\n_c = RescanMarkers;\nexport default RescanMarkers;\n\nvar _c;\n\n$RefreshReg$(_c, \"RescanMarkers\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/components/RescanMarkers.js"],"names":["makeStyles","Fab","AdjustIcon","useDispatch","useSelector","batch","useLeaflet","NONE","createMuiTheme","ThemeProvider","setEndpoint","clearCity","setScanStatus","setScanRadius","setScanCenter","setScanZoom","setViewStatus","setDrawMode","setSearch","useStyles","theme","scanMargin","margin","spacing","top","left","position","zIndex","RescanMarkers","stateMarker","state","marker","dispatch","classes","map","toRadian","degree","Math","PI","getDistance","origin","destination","lon1","lat1","lon2","lat2","deltaLat","deltaLon","a","pow","sin","cos","c","asin","sqrt","EARTH_RADIUS","handleclick","e","view_status","getZoom","cityZoom","setZoom","zoom","center","getCenter","lat","lng","bounds","getBounds","latNE","lngNE","radius","round","type","limit","endpoint","length"],"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,0BAA3B;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,KAAnC,QAAgD,aAAhD;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,aAAjC,EAAgDC,aAAhD,EAA+DC,aAA/D,EAA8EC,WAA9E,EAA2FC,aAA3F,QAAgH,yBAAhH;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,sBAAvC;AAEA,MAAMC,SAAS,GAAGnB,UAAU,CAAEoB,KAAD,KAAY;AACvCC,EAAAA,UAAU,EAAE;AACVC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADE;AAEVC,IAAAA,GAAG,EAAEJ,KAAK,CAACG,OAAN,CAAc,EAAd,CAFK;AAGVE,IAAAA,IAAI,EAAEL,KAAK,CAACG,OAAN,CAAc,CAAd,CAHI;AAIVG,IAAAA,QAAQ,EAAE,OAJA;AAKVC,IAAAA,MAAM,EAAE;AALE;AAD2B,CAAZ,CAAD,CAA5B;;AAWA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAMC,WAAW,GAAGzB,WAAW,CAAC0B,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAA/B;AACA,QAAMC,QAAQ,GAAG7B,WAAW,EAA5B,CAFwB,CAGxB;;AACA,QAAM8B,OAAO,GAAGd,SAAS,EAAzB;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAU5B,UAAU,EAA1B;;AAEA,WAAS6B,QAAT,CAAkBC,MAAlB,EAA0B;AACtB,WAAOA,MAAM,GAACC,IAAI,CAACC,EAAZ,GAAe,GAAtB;AACH;;AAED,WAASC,WAAT,CAAqBC,MAArB,EAA6BC,WAA7B,EAA0C;AACtC;AACA,QAAIC,IAAI,GAAGP,QAAQ,CAACK,MAAM,CAAC,CAAD,CAAP,CAAnB;AAAA,QACIG,IAAI,GAAGR,QAAQ,CAACK,MAAM,CAAC,CAAD,CAAP,CADnB;AAAA,QAEII,IAAI,GAAGT,QAAQ,CAACM,WAAW,CAAC,CAAD,CAAZ,CAFnB;AAAA,QAGII,IAAI,GAAGV,QAAQ,CAACM,WAAW,CAAC,CAAD,CAAZ,CAHnB;AAKA,QAAIK,QAAQ,GAAGD,IAAI,GAAGF,IAAtB;AACA,QAAII,QAAQ,GAAGH,IAAI,GAAGF,IAAtB;AAEA,QAAIM,CAAC,GAAGX,IAAI,CAACY,GAAL,CAASZ,IAAI,CAACa,GAAL,CAASJ,QAAQ,GAAC,CAAlB,CAAT,EAA+B,CAA/B,IAAoCT,IAAI,CAACc,GAAL,CAASR,IAAT,IAAiBN,IAAI,CAACc,GAAL,CAASN,IAAT,CAAjB,GAAkCR,IAAI,CAACY,GAAL,CAASZ,IAAI,CAACa,GAAL,CAASH,QAAQ,GAAC,CAAlB,CAAT,EAA+B,CAA/B,CAA9E;AACA,QAAIK,CAAC,GAAG,IAAIf,IAAI,CAACgB,IAAL,CAAUhB,IAAI,CAACiB,IAAL,CAAUN,CAAV,CAAV,CAAZ;AACA,QAAIO,YAAY,GAAG,IAAnB;AACA,WAAOH,CAAC,GAAGG,YAAJ,GAAmB,IAA1B;AACH;;AAED,WAASC,WAAT,CAAqBC,CAArB,EAAwB;AACpB,QAAI5B,WAAW,CAAC6B,WAAZ,KAA4B,MAA5B,IAAsC7B,WAAW,CAAC6B,WAAZ,KAA4B,QAAtE,EAAgF;AAC5E,UAAIxB,GAAG,CAACyB,OAAJ,KAAgB9B,WAAW,CAAC+B,QAAhC,EAA0C;AACtC1B,QAAAA,GAAG,CAAC2B,OAAJ,CAAYhC,WAAW,CAAC+B,QAAxB;AACH;;AACD,YAAME,IAAI,GAAG5B,GAAG,CAACyB,OAAJ,EAAb;AACA,YAAMI,MAAM,GAAG7B,GAAG,CAAC8B,SAAJ,EAAf;AACA,YAAMC,GAAG,GAAGF,MAAM,CAACE,GAAnB;AACA,YAAMC,GAAG,GAAGH,MAAM,CAACG,GAAnB;AACA,YAAMC,MAAM,GAAGjC,GAAG,CAACkC,SAAJ,EAAf;AACA,YAAMC,KAAK,GAAGF,MAAM,CAAC,YAAD,CAAN,CAAqBF,GAAnC;AACA,YAAMK,KAAK,GAAGH,MAAM,CAAC,YAAD,CAAN,CAAqBD,GAAnC;AACA,YAAMK,MAAM,GAAGlC,IAAI,CAACmC,KAAL,CAAW,MAAIjC,WAAW,CAAC,CAAC8B,KAAD,EAAQC,KAAR,CAAD,EAAgB,CAACL,GAAD,EAAMC,GAAN,CAAhB,CAA1B,CAAf;AAEA7D,MAAAA,KAAK,CAAC,MAAM;AACR2B,QAAAA,QAAQ,CAACrB,SAAS,EAAV,CAAR;AACAqB,QAAAA,QAAQ,CAACnB,aAAa,CAAC0D,MAAD,CAAd,CAAR;AACAvC,QAAAA,QAAQ,CAAClB,aAAa,CAAC;AAACmD,UAAAA,GAAG,EAACA,GAAL;AAAUC,UAAAA,GAAG,EAACA;AAAd,SAAD,CAAd,CAAR;AACAlC,QAAAA,QAAQ,CAACd,SAAS,CAAC,SAAD,CAAV,CAAR;;AACA,YAAI4C,IAAI,GAAGjC,WAAW,CAAC+B,QAAvB,EAAiC;AAC7B5B,UAAAA,QAAQ,CAACjB,WAAW,CAACc,WAAW,CAAC+B,QAAb,CAAZ,CAAR;AACH,SAFD,MAEO;AACH5B,UAAAA,QAAQ,CAACjB,WAAW,CAAC+C,IAAD,CAAZ,CAAR;AACH;;AACD9B,QAAAA,QAAQ,CAAChB,aAAa,CAAC,MAAD,CAAd,CAAR;AACAgB,QAAAA,QAAQ,CAACtB,WAAW,CAAC;AAAC+D,UAAAA,IAAI,EAAC,MAAN;AAAcR,UAAAA,GAAG,EAACA,GAAlB;AAAuBC,UAAAA,GAAG,EAACA,GAA3B;AAAgCK,UAAAA,MAAM,EAACA,MAAvC;AAA+CG,UAAAA,KAAK,EAAC;AAArD,SAAD,CAAZ,CAAR;AACA1C,QAAAA,QAAQ,CAACpB,aAAa,CAAC,UAAD,CAAd,CAAR;AACH,OAbI,CAAL;AAcH,KA3BD,MA2BO,IAAIiB,WAAW,CAAC6B,WAAZ,KAA4B,UAAhC,EAA4C;AAC/C,UAAI7B,WAAW,CAAC8C,QAAZ,CAAqBC,MAArB,GAA8B,CAAlC,EAAqC;AACjCvE,QAAAA,KAAK,CAAC,MAAM;AACR2B,UAAAA,QAAQ,CAAChB,aAAa,CAAC,UAAD,CAAd,CAAR;AACAgB,UAAAA,QAAQ,CAACpB,aAAa,CAAC,UAAD,CAAd,CAAR;AACAoB,UAAAA,QAAQ,CAACf,WAAW,CAACV,IAAD,CAAZ,CAAR;AACH,SAJI,CAAL;AAKH;AACJ;AAEJ;;AAED,sBACI;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,OAAO,EAAEiD,WAAd;AAA2B,MAAA,IAAI,EAAC,OAAhC;AAAwC,MAAA,KAAK,EAAC,SAA9C;AAAwD,oBAAW,KAAnE;AAAyE,MAAA,SAAS,EAAEvB,OAAO,CAACZ,UAA5F;AAAA,6BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA1ED;;GAAMO,a;UACkBxB,W,EACHD,W,EAEDgB,S,EACAb,U;;;KALdsB,a;AA4EN,eAAeA,aAAf","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AdjustIcon from '@material-ui/icons/Adjust';\r\nimport { useDispatch, useSelector, batch } from \"react-redux\";\r\nimport { useLeaflet } from \"react-leaflet\";\r\nimport { NONE } from 'react-leaflet-freedraw';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport { setEndpoint, clearCity, setScanStatus, setScanRadius, setScanCenter, setScanZoom, setViewStatus } from \"../features/markerSlice\";\r\nimport { setDrawMode, setSearch } from \"../features/mapSlice\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  scanMargin: {\r\n    margin: theme.spacing(1),\r\n    top: theme.spacing(28),\r\n    left: theme.spacing(1),\r\n    position: 'fixed',\r\n    zIndex: 1000,\r\n  }\r\n}));\r\n\r\n\r\nconst RescanMarkers = () => {\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const dispatch = useDispatch();\r\n    // classes\r\n    const classes = useStyles();\r\n    const { map } = useLeaflet();\r\n\r\n    function toRadian(degree) {\r\n        return degree*Math.PI/180;\r\n    }\r\n\r\n    function getDistance(origin, destination) {\r\n        // return distance in meters\r\n        var lon1 = toRadian(origin[1]),\r\n            lat1 = toRadian(origin[0]),\r\n            lon2 = toRadian(destination[1]),\r\n            lat2 = toRadian(destination[0]);\r\n\r\n        var deltaLat = lat2 - lat1;\r\n        var deltaLon = lon2 - lon1;\r\n\r\n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\r\n        var c = 2 * Math.asin(Math.sqrt(a));\r\n        var EARTH_RADIUS = 6371;\r\n        return c * EARTH_RADIUS * 1000;\r\n    }\r\n\r\n    function handleclick(e) {\r\n        if (stateMarker.view_status === \"city\" || stateMarker.view_status === \"global\") {\r\n            if (map.getZoom() < stateMarker.cityZoom) {\r\n                map.setZoom(stateMarker.cityZoom);\r\n            }\r\n            const zoom = map.getZoom();\r\n            const center = map.getCenter();\r\n            const lat = center.lat;\r\n            const lng = center.lng;\r\n            const bounds = map.getBounds();\r\n            const latNE = bounds['_northEast'].lat\r\n            const lngNE = bounds['_northEast'].lng\r\n            const radius = Math.round(0.5*getDistance([latNE, lngNE],[lat, lng]));\r\n\r\n            batch(() => {\r\n                dispatch(clearCity());\r\n                dispatch(setScanRadius(radius));\r\n                dispatch(setScanCenter({lat:lat, lng:lng}));\r\n                dispatch(setSearch(\"waiting\"));\r\n                if (zoom < stateMarker.cityZoom) {\r\n                    dispatch(setScanZoom(stateMarker.cityZoom));\r\n                } else {\r\n                    dispatch(setScanZoom(zoom));\r\n                }\r\n                dispatch(setViewStatus(\"city\"))\r\n                dispatch(setEndpoint({type:\"city\", lat:lat, lng:lng, radius:radius, limit:1000}));\r\n                dispatch(setScanStatus(\"scanning\"));\r\n            });\r\n        } else if (stateMarker.view_status === \"freedraw\") {\r\n            if (stateMarker.endpoint.length > 0) {\r\n                batch(() => {\r\n                    dispatch(setViewStatus(\"freedraw\"))\r\n                    dispatch(setScanStatus(\"scanning\"));\r\n                    dispatch(setDrawMode(NONE));\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Fab onClick={handleclick} size=\"small\" color=\"primary\" aria-label=\"add\" className={classes.scanMargin}>\r\n                <AdjustIcon />\r\n            </Fab>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RescanMarkers;"]},"metadata":{},"sourceType":"module"}
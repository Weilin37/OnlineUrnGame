{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios'; // CREATE Thunk\n\nexport const getData = createAsyncThunk(\"markers/getData\", async (endpoint, thunkAPI) => {\n  try {\n    const response = await axios.get(endpoint);\n    return response.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue({\n      error: error.message\n    });\n  }\n}); // CREATE SLICE\n\nconst markerSlice = createSlice({\n  name: \"markers\",\n  initialState: {\n    data: [],\n    filtered_data: [],\n    filtered_species: '',\n    endpoint: \"/api/get/data\",\n    loading: false\n  },\n  reducers: {\n    setEndpoint: (state, action) => {\n      state.endpoint = \"/api/get/data\";\n    },\n    setFilteredSpecies: (state, action) => {\n      state.filtered_species = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    // global\n    builder.addCase(getData.pending, state => {\n      state.data = [];\n    });\n    builder.addCase(getData.fulfilled, (state, {\n      payload\n    }) => {\n      state.data = payload;\n      state.filtered_species = state.data[0]['species'];\n    });\n    builder.addCase(getData.rejected, (state, action) => {\n      state.loading = false;\n    });\n  }\n});\nexport const {\n  setEndpoint,\n  setFilteredSpecies\n} = markerSlice.actions;\nexport default markerSlice;","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/InsectTrade/app/client/src/js/features/markerSlice.js"],"names":["createSlice","createAsyncThunk","axios","getData","endpoint","thunkAPI","response","get","data","error","rejectWithValue","message","markerSlice","name","initialState","filtered_data","filtered_species","loading","reducers","setEndpoint","state","action","setFilteredSpecies","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions"],"mappings":"AAAA,SAASA,WAAT,EAAqBC,gBAArB,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAGF,gBAAgB,CAAC,iBAAD,EAAoB,OAAOG,QAAP,EAAiBC,QAAjB,KAA8B;AACrF,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAUH,QAAV,CAAvB;AACA,WAAOE,QAAQ,CAACE,IAAhB;AACH,GAHD,CAGE,OAAOC,KAAP,EAAc;AACX,WAAOJ,QAAQ,CAACK,eAAT,CAAyB;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,KAAzB,CAAP;AACJ;AACJ,CAPsC,CAAhC,C,CAUP;;AACA,MAAMC,WAAW,GAAGZ,WAAW,CAAC;AAC9Ba,EAAAA,IAAI,EAAE,SADwB;AAE9BC,EAAAA,YAAY,EAAE;AACZN,IAAAA,IAAI,EAAE,EADM;AAEZO,IAAAA,aAAa,EAAE,EAFH;AAGZC,IAAAA,gBAAgB,EAAE,EAHN;AAIZZ,IAAAA,QAAQ,EAAE,eAJE;AAKZa,IAAAA,OAAO,EAAE;AALG,GAFgB;AAS9BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAACD,MAAAA,KAAK,CAAChB,QAAN,GAAiB,eAAjB;AAAiC,KAD1D;AAERkB,IAAAA,kBAAkB,EAAE,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAACD,MAAAA,KAAK,CAACJ,gBAAN,GAAyBK,MAAM,CAACE,OAAhC;AAAyC;AAFzE,GAToB;AAa9BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,OAAO,CAACwB,OAAxB,EAAkCP,KAAD,IAAW;AACxCA,MAAAA,KAAK,CAACZ,IAAN,GAAa,EAAb;AACH,KAFD;AAGAiB,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,OAAO,CAACyB,SAAxB,EAAmC,CAACR,KAAD,EAAQ;AAAEG,MAAAA;AAAF,KAAR,KAAwB;AACvDH,MAAAA,KAAK,CAACZ,IAAN,GAAae,OAAb;AACAH,MAAAA,KAAK,CAACJ,gBAAN,GAAyBI,KAAK,CAACZ,IAAN,CAAW,CAAX,EAAc,SAAd,CAAzB;AACH,KAHD;AAIAiB,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,OAAO,CAAC0B,QAAxB,EAAiC,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAChDD,MAAAA,KAAK,CAACH,OAAN,GAAgB,KAAhB;AACH,KAFD;AAGD;AAzB6B,CAAD,CAA/B;AA4BA,OAAO,MAAM;AAAEE,EAAAA,WAAF;AAAeG,EAAAA;AAAf,IAAsCV,WAAW,CAACkB,OAAxD;AAEP,eAAelB,WAAf","sourcesContent":["import { createSlice,createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from 'axios';\r\n\r\n// CREATE Thunk\r\nexport const getData = createAsyncThunk(\"markers/getData\", async (endpoint, thunkAPI) => {\r\n    try {\r\n        const response = await axios.get(endpoint);\r\n        return response.data;\r\n    } catch (error) {\r\n         return thunkAPI.rejectWithValue({ error: error.message });\r\n    }\r\n});\r\n\r\n\r\n// CREATE SLICE\r\nconst markerSlice = createSlice({\r\n  name: \"markers\",\r\n  initialState: {\r\n    data: [],\r\n    filtered_data: [],\r\n    filtered_species: '',\r\n    endpoint: \"/api/get/data\",\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    setEndpoint: (state, action) => {state.endpoint = \"/api/get/data\"},\r\n    setFilteredSpecies: (state, action) => {state.filtered_species = action.payload;},\r\n  },\r\n  extraReducers: (builder) => {\r\n    // global\r\n    builder.addCase(getData.pending, (state) => {\r\n        state.data = [];\r\n    });\r\n    builder.addCase(getData.fulfilled, (state, { payload }) => {\r\n        state.data = payload;\r\n        state.filtered_species = state.data[0]['species'];\r\n    });\r\n    builder.addCase(getData.rejected,(state, action) => {\r\n        state.loading = false;\r\n    });\r\n  }\r\n});\r\n\r\nexport const { setEndpoint, setFilteredSpecies } = markerSlice.actions;\r\n\r\nexport default markerSlice"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\UrbanTreeConservation\\\\client\\\\src\\\\js\\\\components\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport RescanMarkers from \"./RescanMarkers\";\nimport DrawBounds from \"./DrawBounds\";\nimport FreeDrawCustom from \"./FreeDrawCustom\";\nimport FreeDrawButtons from \"./FreeDrawButtons\";\nimport DrawAnalysisNative from \"./DrawAnalysisNative\";\nimport DrawSimilarityButtons from \"./DrawSimilarityButtons\";\nimport GetMarkers from \"./GetMarkers\";\nimport DataViewButtons from \"./DataViewButtons\";\nimport { Map, TileLayer } from \"react-leaflet\";\nimport \"../../css/app.css\";\nimport { useSelector, useDispatch, batch } from \"react-redux\";\nimport { getGlobal, getCity, getFreeDraw, setEndpoint, setViewStatus, clearCity, setScanStatus, setScanRadius, setScanCenter, setScanZoom } from \"../features/markerSlice\";\nimport { setSearch } from \"../features/mapSlice\";\nexport const LeafMap = () => {\n  _s();\n\n  const dispatch = useDispatch(); // state\n\n  const stateMarker = useSelector(state => state.marker);\n  const stateMap = useSelector(state => state.map);\n  const cityZoom = stateMarker.cityZoom; // Effects\n\n  useEffect(() => {\n    dispatch(getGlobal(stateMarker.endpoint));\n  }, [dispatch]);\n  useEffect(() => {\n    if (stateMarker.scan_status === \"scanning\" && stateMarker.view_status === \"city\") {\n      dispatch(getCity(stateMarker.endpoint));\n    } else if (stateMarker.scan_status === \"scanning\" && stateMarker.view_status === \"freedraw\") {\n      console.log(\"api\");\n      dispatch(getFreeDraw(stateMarker.endpoint));\n    }\n  }, [stateMarker.scan_status]);\n\n  function toRadian(degree) {\n    return degree * Math.PI / 180;\n  }\n\n  function getDistance(origin, destination) {\n    // return distance in meters\n    var lon1 = toRadian(origin[1]),\n        lat1 = toRadian(origin[0]),\n        lon2 = toRadian(destination[1]),\n        lat2 = toRadian(destination[0]);\n    var deltaLat = lat2 - lat1;\n    var deltaLon = lon2 - lon1;\n    var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    var EARTH_RADIUS = 6371;\n    return c * EARTH_RADIUS * 1000;\n  }\n\n  function handlezoomend(e) {\n    const map = e.target;\n    const zoom = map.getZoom();\n\n    if (zoom < cityZoom) {\n      if (stateMarker.view_status !== \"global\") {\n        dispatch(setViewStatus(\"global\"));\n      }\n    } else {\n      if (stateMarker.view_status === \"global\" && stateMarker.previous_view_status === \"global\") {\n        dispatch(setViewStatus(\"city\"));\n      } else if (stateMarker.view_status === \"global\" && stateMarker.previous_view_status !== \"global\") {\n        dispatch(setViewStatus(stateMarker.previous_view_status));\n      }\n    }\n  }\n\n  function handlemoveend(e) {\n    const map = e.target;\n    const zoom = map.getZoom();\n    const lat = map.getCenter().lat;\n    const lng = map.getCenter().lng;\n    const bounds = map.getBounds();\n    const latNE = bounds['_northEast'].lat;\n    const lngNE = bounds['_northEast'].lng;\n    const radius = Math.round(0.5 * getDistance([latNE, lngNE], [lat, lng]));\n\n    if (zoom >= cityZoom) {\n      if (stateMap.search === \"searching\") {\n        batch(() => {\n          dispatch(clearCity());\n          dispatch(setScanRadius(radius));\n          dispatch(setScanCenter({\n            lat: lat,\n            lng: lng\n          }));\n          dispatch(setScanZoom(zoom));\n          dispatch(setSearch(\"waiting\"));\n          dispatch(setEndpoint({\n            type: \"city\",\n            lat: lat,\n            lng: lng,\n            radius: radius,\n            limit: 50000\n          }));\n          dispatch(setScanStatus(\"scanning\"));\n        });\n      }\n    }\n  } // render component\n\n\n  if (stateMarker.global.length > 0) {\n    return /*#__PURE__*/_jsxDEV(Map, {\n      onmoveend: handlemoveend,\n      onzoomend: handlezoomend,\n      doubleClickZoom: false,\n      preferCanvas: true,\n      center: [stateMap.lat, stateMap.lng],\n      zoom: stateMap.zoom,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DrawBounds, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(GetMarkers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(RescanMarkers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(FreeDrawButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(FreeDrawCustom, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DataViewButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DrawAnalysisNative, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DrawSimilarityButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Map, {\n      center: [stateMap.lat, stateMap.lng],\n      zoom: stateMap.zoom,\n      scrollWheelZoom: true,\n      children: /*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(LeafMap, \"O2IFd/bF0xx82K9yi+Jd5KPEc3o=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = LeafMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeafMap\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/components/Map.js"],"names":["React","useEffect","RescanMarkers","DrawBounds","FreeDrawCustom","FreeDrawButtons","DrawAnalysisNative","DrawSimilarityButtons","GetMarkers","DataViewButtons","Map","TileLayer","useSelector","useDispatch","batch","getGlobal","getCity","getFreeDraw","setEndpoint","setViewStatus","clearCity","setScanStatus","setScanRadius","setScanCenter","setScanZoom","setSearch","LeafMap","dispatch","stateMarker","state","marker","stateMap","map","cityZoom","endpoint","scan_status","view_status","console","log","toRadian","degree","Math","PI","getDistance","origin","destination","lon1","lat1","lon2","lat2","deltaLat","deltaLon","a","pow","sin","cos","c","asin","sqrt","EARTH_RADIUS","handlezoomend","e","target","zoom","getZoom","previous_view_status","handlemoveend","lat","getCenter","lng","bounds","getBounds","latNE","lngNE","radius","round","search","type","limit","global","length"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport RescanMarkers from \"./RescanMarkers\";\r\nimport DrawBounds from \"./DrawBounds\";\r\nimport FreeDrawCustom from \"./FreeDrawCustom\";\r\nimport FreeDrawButtons from \"./FreeDrawButtons\";\r\nimport DrawAnalysisNative from \"./DrawAnalysisNative\";\r\nimport DrawSimilarityButtons from \"./DrawSimilarityButtons\";\r\nimport GetMarkers from \"./GetMarkers\";\r\nimport DataViewButtons from \"./DataViewButtons\";\r\nimport { Map, TileLayer } from \"react-leaflet\";\r\nimport \"../../css/app.css\";\r\nimport { useSelector, useDispatch, batch } from \"react-redux\";\r\nimport { getGlobal, getCity, getFreeDraw, setEndpoint, setViewStatus, clearCity, setScanStatus, setScanRadius, setScanCenter, setScanZoom } from \"../features/markerSlice\";\r\nimport { setSearch } from \"../features/mapSlice\";\r\n\r\nexport const LeafMap = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    // state\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateMap = useSelector(state => state.map);\r\n\r\n    const cityZoom = stateMarker.cityZoom;\r\n\r\n    // Effects\r\n    useEffect(() => {\r\n        dispatch(getGlobal(stateMarker.endpoint));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (stateMarker.scan_status === \"scanning\" && stateMarker.view_status === \"city\") {\r\n           dispatch(getCity(stateMarker.endpoint));\r\n        }\r\n        else if (stateMarker.scan_status === \"scanning\" && stateMarker.view_status === \"freedraw\") {\r\n            console.log(\"api\")\r\n           dispatch(getFreeDraw(stateMarker.endpoint));\r\n        }\r\n    }, [stateMarker.scan_status]);\r\n\r\n    function toRadian(degree) {\r\n        return degree*Math.PI/180;\r\n    }\r\n\r\n    function getDistance(origin, destination) {\r\n        // return distance in meters\r\n        var lon1 = toRadian(origin[1]),\r\n            lat1 = toRadian(origin[0]),\r\n            lon2 = toRadian(destination[1]),\r\n            lat2 = toRadian(destination[0]);\r\n\r\n        var deltaLat = lat2 - lat1;\r\n        var deltaLon = lon2 - lon1;\r\n\r\n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\r\n        var c = 2 * Math.asin(Math.sqrt(a));\r\n        var EARTH_RADIUS = 6371;\r\n        return c * EARTH_RADIUS * 1000;\r\n    }\r\n\r\n    function handlezoomend(e) {\r\n        const map = e.target;\r\n        const zoom = map.getZoom();\r\n\r\n        if (zoom < cityZoom) {\r\n            if (stateMarker.view_status !== \"global\") {\r\n                dispatch(setViewStatus(\"global\"));\r\n            }\r\n        } else {\r\n            if (stateMarker.view_status === \"global\" && stateMarker.previous_view_status === \"global\") {\r\n                dispatch(setViewStatus(\"city\"));\r\n            } else if (stateMarker.view_status === \"global\" && stateMarker.previous_view_status !== \"global\") {\r\n                dispatch(setViewStatus(stateMarker.previous_view_status));\r\n            }\r\n        }\r\n    }\r\n\r\n    function handlemoveend(e) {\r\n        const map = e.target;\r\n        const zoom = map.getZoom();\r\n        const lat = map.getCenter().lat;\r\n        const lng = map.getCenter().lng;\r\n\r\n        const bounds = map.getBounds();\r\n        const latNE = bounds['_northEast'].lat\r\n        const lngNE = bounds['_northEast'].lng\r\n        const radius = Math.round(0.5*getDistance([latNE, lngNE],[lat, lng]));\r\n        if (zoom >= cityZoom) {\r\n            if (stateMap.search === \"searching\") {\r\n                batch(() => {\r\n                    dispatch(clearCity());\r\n                    dispatch(setScanRadius(radius));\r\n                    dispatch(setScanCenter({lat:lat, lng:lng}));\r\n                    dispatch(setScanZoom(zoom));\r\n                    dispatch(setSearch(\"waiting\"));\r\n                    dispatch(setEndpoint({type:\"city\", lat:lat, lng:lng, radius:radius, limit:50000}));\r\n                    dispatch(setScanStatus(\"scanning\"));\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // render component\r\n    if (stateMarker.global.length > 0) {\r\n        return (\r\n            <Map onmoveend={handlemoveend} onzoomend={handlezoomend} doubleClickZoom={false} preferCanvas={true} center={[stateMap.lat, stateMap.lng]}\r\n            zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n              <DrawBounds />\r\n              <GetMarkers />\r\n              <RescanMarkers />\r\n              <FreeDrawButtons />\r\n              <FreeDrawCustom />\r\n              <DataViewButtons />\r\n              <DrawAnalysisNative />\r\n              <DrawSimilarityButtons />\r\n            </Map>\r\n        );\r\n    } else {\r\n        return (\r\n            <Map center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n            </Map>\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\UrbanTreeConservation\\\\client\\\\src\\\\js\\\\components\\\\Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport FreeDrawCustom from \"./FreeDrawCustom\";\nimport DrawAnalysisNative from \"./DrawAnalysisNative\";\nimport DrawSimilarityButtons from \"./DrawSimilarityButtons\";\nimport GetMarkers from \"./GetMarkers\";\nimport Loading from \"./Loading\";\nimport DataViewButtons from \"./DataViewButtons\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport \"../../css/app.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getGlobal } from \"../features/markerSlice\";\nexport const LeafMap = () => {\n  _s();\n\n  const dispatch = useDispatch(); // state\n\n  const stateMarker = useSelector(state => state.marker);\n  const stateMap = useSelector(state => state.map); // Effects\n\n  useEffect(() => {\n    dispatch(getGlobal(stateMarker.endpoint));\n  }, [dispatch]); // render component\n\n  if (stateMarker.global.length > 0) {\n    return /*#__PURE__*/_jsxDEV(MapContainer, {\n      doubleClickZoom: false,\n      preferCanvas: true,\n      center: [stateMap.lat, stateMap.lng],\n      zoom: stateMap.zoom,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(GetMarkers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DataViewButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DrawAnalysisNative, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(DrawSimilarityButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [stateMap.lat, stateMap.lng],\n      zoom: stateMap.zoom,\n      scrollWheelZoom: true,\n      children: /*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(LeafMap, \"P4w/7haOUwmmnQlgE8olLhv4nIw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = LeafMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeafMap\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/components/Map.js"],"names":["React","useEffect","FreeDrawCustom","DrawAnalysisNative","DrawSimilarityButtons","GetMarkers","Loading","DataViewButtons","MapContainer","TileLayer","useSelector","useDispatch","getGlobal","LeafMap","dispatch","stateMarker","state","marker","stateMap","map","endpoint","global","length","lat","lng","zoom"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,eAAxC;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAMC,QAAQ,GAAGH,WAAW,EAA5B,CADyB,CAGzB;;AACA,QAAMI,WAAW,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAA/B;AACA,QAAMC,QAAQ,GAAGR,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACG,GAAhB,CAA5B,CALyB,CAOzB;;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,QAAQ,CAACF,SAAS,CAACG,WAAW,CAACK,QAAb,CAAV,CAAR;AACH,GAFQ,EAEN,CAACN,QAAD,CAFM,CAAT,CARyB,CAYzB;;AACA,MAAIC,WAAW,CAACM,MAAZ,CAAmBC,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,wBACI,QAAC,YAAD;AAAc,MAAA,eAAe,EAAE,KAA/B;AAAsC,MAAA,YAAY,EAAE,IAApD;AAA0D,MAAA,MAAM,EAAE,CAACJ,QAAQ,CAACK,GAAV,EAAeL,QAAQ,CAACM,GAAxB,CAAlE;AACA,MAAA,IAAI,EAAEN,QAAQ,CAACO,IADf;AACqB,MAAA,eAAe,EAAE,IADtC;AAAA,8BAEE,QAAC,SAAD;AACE,QAAA,GAAG,EAAC;AADN;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cANF,eAQE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cARF,eASE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,cATF,eAUE,QAAC,qBAAD;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH,GAfD,MAeO;AACH,wBACI,QAAC,YAAD;AAAc,MAAA,MAAM,EAAE,CAACP,QAAQ,CAACK,GAAV,EAAeL,QAAQ,CAACM,GAAxB,CAAtB;AAAoD,MAAA,IAAI,EAAEN,QAAQ,CAACO,IAAnE;AAAyE,MAAA,eAAe,EAAE,IAA1F;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,GAAG,EAAC;AADN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;AAEJ,CAtCM;;GAAMZ,O;UACQF,W,EAGGD,W,EACHA,W;;;KALRG,O","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport FreeDrawCustom from \"./FreeDrawCustom\";\r\nimport DrawAnalysisNative from \"./DrawAnalysisNative\";\r\nimport DrawSimilarityButtons from \"./DrawSimilarityButtons\";\r\nimport GetMarkers from \"./GetMarkers\";\r\nimport Loading from \"./Loading\";\r\nimport DataViewButtons from \"./DataViewButtons\";\r\nimport { MapContainer, TileLayer } from \"react-leaflet\";\r\nimport \"../../css/app.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getGlobal } from \"../features/markerSlice\";\r\n\r\nexport const LeafMap = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    // state\r\n    const stateMarker = useSelector(state => state.marker);\r\n    const stateMap = useSelector(state => state.map);\r\n\r\n    // Effects\r\n    useEffect(() => {\r\n        dispatch(getGlobal(stateMarker.endpoint));\r\n    }, [dispatch]);\r\n\r\n    // render component\r\n    if (stateMarker.global.length > 0) {\r\n        return (\r\n            <MapContainer doubleClickZoom={false} preferCanvas={true} center={[stateMap.lat, stateMap.lng]}\r\n            zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n              <Loading />\r\n              <GetMarkers />\r\n\r\n              <DataViewButtons />\r\n              <DrawAnalysisNative />\r\n              <DrawSimilarityButtons />\r\n            </MapContainer>\r\n        );\r\n    } else {\r\n        return (\r\n            <MapContainer center={[stateMap.lat, stateMap.lng]} zoom={stateMap.zoom} scrollWheelZoom={true}>\r\n              <TileLayer\r\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}\"\r\n              />\r\n            </MapContainer>\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
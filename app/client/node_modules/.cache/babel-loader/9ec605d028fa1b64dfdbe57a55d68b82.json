{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Weilin\\\\Documents\\\\GitHub\\\\UrbanTreeConservation\\\\client\\\\src\\\\js\\\\components\\\\FreeDrawCustom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport Freedraw from 'react-leaflet-freedraw';\nimport \"../../css/freedraw.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setEndpoint, clearFreeDraw } from \"../features/markerSlice\";\nimport { setDrawMode } from \"../features/mapSlice\";\nimport { useLeaflet } from \"react-leaflet\"; // Custom map components\n\nconst FreeDrawCustom = () => {\n  _s();\n\n  const stateMap = useSelector(state => state.map);\n  const dispatch = useDispatch();\n  const freeDrawRef = useRef(null);\n  const {\n    map\n  } = useLeaflet();\n  const center = map.getCenter();\n  const lat = center.lat;\n  const lng = center.lng;\n  const bounds = map.getBounds();\n  const latNE = bounds['_northEast'].lat;\n  const lngNE = bounds['_northEast'].lng;\n  const radius = Math.round(getDistance([latNE, lngNE], [lat, lng]));\n\n  function toRadian(degree) {\n    return degree * Math.PI / 180;\n  }\n\n  function getDistance(origin, destination) {\n    // return distance in meters\n    var lon1 = toRadian(origin[1]),\n        lat1 = toRadian(origin[0]),\n        lon2 = toRadian(destination[1]),\n        lat2 = toRadian(destination[0]);\n    var deltaLat = lat2 - lat1;\n    var deltaLon = lon2 - lon1;\n    var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    var EARTH_RADIUS = 6371;\n    return c * EARTH_RADIUS * 1000;\n  } // Listen for any markers added, removed or edited, and then output the lat lng boundaries.\n\n\n  function handleOnMarkers(e) {\n    if (e.latLngs.length > 0) {\n      const coordinates = e.latLngs[0];\n      console.log(coordinates);\n      let polygonArray = [];\n\n      for (var i = 0; i < coordinates.length; i++) {\n        let lng = coordinates[i].lng;\n        let lat = coordinates[i].lat;\n        let string = lng + ' ' + lat;\n        polygonArray.push(string);\n      }\n\n      polygonArray.push(coordinates[0].lng + ' ' + coordinates[0].lat);\n      let polygonString = polygonArray.join(',');\n      dispatch(setEndpoint({\n        type: \"freedraw\",\n        polygons: polygonString,\n        lat: lat,\n        lng: lng,\n        radius: radius\n      }));\n    } else if (e.latLngs.length === 0) {\n      console.log(\"clearing free draw\");\n      dispatch(clearFreeDraw());\n    }\n  }\n\n  ;\n\n  function handleModeChange(e) {\n    console.log('mode changed', e.mode);\n\n    if (e.mode === 10 && stateMap.draw_mode !== 10) {\n      dispatch(setDrawMode(10));\n    }\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Freedraw, {\n    mode: stateMap.draw_mode,\n    onMarkers: handleOnMarkers,\n    onModeChange: handleModeChange,\n    simplifyFactor: 2,\n    ref: freeDrawRef,\n    leaveModeAfterCreate: true,\n    maximumPolygons: 1\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FreeDrawCustom, \"hEeBe4Ea//PUaCmq8uKevlMMY5E=\", false, function () {\n  return [useSelector, useDispatch, useLeaflet];\n});\n\n_c = FreeDrawCustom;\nexport default FreeDrawCustom;\n\nvar _c;\n\n$RefreshReg$(_c, \"FreeDrawCustom\");","map":{"version":3,"sources":["C:/Users/Weilin/Documents/GitHub/UrbanTreeConservation/client/src/js/components/FreeDrawCustom.js"],"names":["React","useRef","Freedraw","useSelector","useDispatch","setEndpoint","clearFreeDraw","setDrawMode","useLeaflet","FreeDrawCustom","stateMap","state","map","dispatch","freeDrawRef","center","getCenter","lat","lng","bounds","getBounds","latNE","lngNE","radius","Math","round","getDistance","toRadian","degree","PI","origin","destination","lon1","lat1","lon2","lat2","deltaLat","deltaLon","a","pow","sin","cos","c","asin","sqrt","EARTH_RADIUS","handleOnMarkers","e","latLngs","length","coordinates","console","log","polygonArray","i","string","push","polygonString","join","type","polygons","handleModeChange","mode","draw_mode"],"mappings":"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","sourcesContent":["import React, {useRef} from \"react\";\r\nimport Freedraw from 'react-leaflet-freedraw';\r\nimport \"../../css/freedraw.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setEndpoint, clearFreeDraw } from \"../features/markerSlice\";\r\nimport { setDrawMode } from \"../features/mapSlice\";\r\nimport { useLeaflet } from \"react-leaflet\";\r\n\r\n// Custom map components\r\nconst FreeDrawCustom = () => {\r\n    const stateMap = useSelector(state => state.map);\r\n    const dispatch = useDispatch();\r\n    const freeDrawRef = useRef(null);\r\n\r\n    const { map } = useLeaflet();\r\n    const center = map.getCenter();\r\n    const lat = center.lat;\r\n    const lng = center.lng;\r\n    const bounds = map.getBounds();\r\n    const latNE = bounds['_northEast'].lat\r\n    const lngNE = bounds['_northEast'].lng\r\n    const radius = Math.round(getDistance([latNE, lngNE],[lat, lng]));\r\n\r\n    function toRadian(degree) {\r\n        return degree*Math.PI/180;\r\n    }\r\n\r\n    function getDistance(origin, destination) {\r\n        // return distance in meters\r\n        var lon1 = toRadian(origin[1]),\r\n            lat1 = toRadian(origin[0]),\r\n            lon2 = toRadian(destination[1]),\r\n            lat2 = toRadian(destination[0]);\r\n\r\n        var deltaLat = lat2 - lat1;\r\n        var deltaLon = lon2 - lon1;\r\n\r\n        var a = Math.pow(Math.sin(deltaLat/2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon/2), 2);\r\n        var c = 2 * Math.asin(Math.sqrt(a));\r\n        var EARTH_RADIUS = 6371;\r\n        return c * EARTH_RADIUS * 1000;\r\n    }\r\n\r\n    // Listen for any markers added, removed or edited, and then output the lat lng boundaries.\r\n    function handleOnMarkers(e) {\r\n        if (e.latLngs.length > 0){\r\n            const coordinates = e.latLngs[0];\r\n            console.log(coordinates);\r\n            let polygonArray = [];\r\n            for (var i = 0; i<coordinates.length; i++) {\r\n                let lng = coordinates[i].lng;\r\n                let lat = coordinates[i].lat;\r\n                let string = lng+' '+lat;\r\n                polygonArray.push(string);\r\n            }\r\n            polygonArray.push(coordinates[0].lng+' '+coordinates[0].lat);\r\n\r\n            let polygonString = polygonArray.join(',');\r\n            dispatch(setEndpoint({type:\"freedraw\", polygons:polygonString, lat:lat, lng:lng, radius:radius}));\r\n        }\r\n        else if (e.latLngs.length === 0) {\r\n            console.log(\"clearing free draw\");\r\n            dispatch(clearFreeDraw());\r\n        }\r\n    };\r\n\r\n    function handleModeChange(e) {\r\n        console.log('mode changed', e.mode);\r\n        if (e.mode === 10 && stateMap.draw_mode !== 10) {\r\n            dispatch(setDrawMode(10));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Freedraw\r\n          mode={stateMap.draw_mode}\r\n          onMarkers={handleOnMarkers}\r\n          onModeChange={handleModeChange}\r\n          simplifyFactor={2}\r\n          ref={freeDrawRef}\r\n          leaveModeAfterCreate={true}\r\n          maximumPolygons={1}\r\n        />\r\n    )\r\n\r\n}\r\n\r\nexport default FreeDrawCustom;"]},"metadata":{},"sourceType":"module"}